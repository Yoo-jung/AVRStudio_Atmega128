
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000864  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b8  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b3  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000155c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d5  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000018  00000000  00000000  00001975  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000198d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4f c0       	rjmp	.+158    	; 0xa0 <__ctors_end>
   2:	00 00       	nop
   4:	55 c0       	rjmp	.+170    	; 0xb0 <__bad_interrupt>
   6:	00 00       	nop
   8:	53 c0       	rjmp	.+166    	; 0xb0 <__bad_interrupt>
   a:	00 00       	nop
   c:	51 c0       	rjmp	.+162    	; 0xb0 <__bad_interrupt>
   e:	00 00       	nop
  10:	4f c0       	rjmp	.+158    	; 0xb0 <__bad_interrupt>
  12:	00 00       	nop
  14:	4d c0       	rjmp	.+154    	; 0xb0 <__bad_interrupt>
  16:	00 00       	nop
  18:	4b c0       	rjmp	.+150    	; 0xb0 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	49 c0       	rjmp	.+146    	; 0xb0 <__bad_interrupt>
  1e:	00 00       	nop
  20:	47 c0       	rjmp	.+142    	; 0xb0 <__bad_interrupt>
  22:	00 00       	nop
  24:	45 c0       	rjmp	.+138    	; 0xb0 <__bad_interrupt>
  26:	00 00       	nop
  28:	43 c0       	rjmp	.+134    	; 0xb0 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	41 c0       	rjmp	.+130    	; 0xb0 <__bad_interrupt>
  2e:	00 00       	nop
  30:	3f c0       	rjmp	.+126    	; 0xb0 <__bad_interrupt>
  32:	00 00       	nop
  34:	3d c0       	rjmp	.+122    	; 0xb0 <__bad_interrupt>
  36:	00 00       	nop
  38:	3b c0       	rjmp	.+118    	; 0xb0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	39 c0       	rjmp	.+114    	; 0xb0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	37 c0       	rjmp	.+110    	; 0xb0 <__bad_interrupt>
  42:	00 00       	nop
  44:	35 c0       	rjmp	.+106    	; 0xb0 <__bad_interrupt>
  46:	00 00       	nop
  48:	33 c0       	rjmp	.+102    	; 0xb0 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	31 c0       	rjmp	.+98     	; 0xb0 <__bad_interrupt>
  4e:	00 00       	nop
  50:	2f c0       	rjmp	.+94     	; 0xb0 <__bad_interrupt>
  52:	00 00       	nop
  54:	2d c0       	rjmp	.+90     	; 0xb0 <__bad_interrupt>
  56:	00 00       	nop
  58:	2b c0       	rjmp	.+86     	; 0xb0 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	29 c0       	rjmp	.+82     	; 0xb0 <__bad_interrupt>
  5e:	00 00       	nop
  60:	27 c0       	rjmp	.+78     	; 0xb0 <__bad_interrupt>
  62:	00 00       	nop
  64:	25 c0       	rjmp	.+74     	; 0xb0 <__bad_interrupt>
  66:	00 00       	nop
  68:	23 c0       	rjmp	.+70     	; 0xb0 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	21 c0       	rjmp	.+66     	; 0xb0 <__bad_interrupt>
  6e:	00 00       	nop
  70:	1f c0       	rjmp	.+62     	; 0xb0 <__bad_interrupt>
  72:	00 00       	nop
  74:	1d c0       	rjmp	.+58     	; 0xb0 <__bad_interrupt>
  76:	00 00       	nop
  78:	1b c0       	rjmp	.+54     	; 0xb0 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	19 c0       	rjmp	.+50     	; 0xb0 <__bad_interrupt>
  7e:	00 00       	nop
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__bad_interrupt>
  82:	00 00       	nop
  84:	15 c0       	rjmp	.+42     	; 0xb0 <__bad_interrupt>
  86:	00 00       	nop
  88:	13 c0       	rjmp	.+38     	; 0xb0 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	98 00       	.word	0x0098	; ????
  8e:	95 00       	.word	0x0095	; ????
  90:	92 00       	.word	0x0092	; ????
  92:	8f 00       	.word	0x008f	; ????
  94:	8c 00       	.word	0x008c	; ????
  96:	9a 00       	.word	0x009a	; ????
  98:	89 00       	.word	0x0089	; ????
  9a:	86 00       	.word	0x0086	; ????
  9c:	83 00       	.word	0x0083	; ????
  9e:	80 00       	.word	0x0080	; ????

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	d0 e1       	ldi	r29, 0x10	; 16
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	cd bf       	out	0x3d, r28	; 61
  ac:	1a d0       	rcall	.+52     	; 0xe2 <main>
  ae:	74 c0       	rjmp	.+232    	; 0x198 <_exit>

000000b0 <__bad_interrupt>:
  b0:	a7 cf       	rjmp	.-178    	; 0x0 <__vectors>

000000b2 <ADC_init>:
#include <avr/io.h>
#include <util/delay.h>

void ADC_init()
{
	ADMUX  |= (1 << REFS0);               // AVCC 핀 입력을 기준전압(5V)
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	87 b9       	out	0x07, r24	; 7
	ADMUX  |= (1 << MUX0 | 1 << MUX1);         // PF3을 ADC입력핀으로 설정, 단일 입력 방식
  b8:	87 b1       	in	r24, 0x07	; 7
  ba:	83 60       	ori	r24, 0x03	; 3
  bc:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);   // 분주비 128로 설정
  be:	86 b1       	in	r24, 0x06	; 6
  c0:	87 60       	ori	r24, 0x07	; 7
  c2:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADEN);               // ADC 활성화 (전원 ON)
  c4:	86 b1       	in	r24, 0x06	; 6
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADFR);               // 프리러닝 모드로 설정
  ca:	86 b1       	in	r24, 0x06	; 6
  cc:	80 62       	ori	r24, 0x20	; 32
  ce:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADSC);               // ADC 변환 시작
  d0:	86 b1       	in	r24, 0x06	; 6
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	86 b9       	out	0x06, r24	; 6
  d6:	08 95       	ret

000000d8 <read_ADC>:
}
int read_ADC(void)
{
	while( ! ( ADCSRA & (1 << ADIF) ) );
  d8:	34 9b       	sbis	0x06, 4	; 6
  da:	fe cf       	rjmp	.-4      	; 0xd8 <read_ADC>
	return ADC;
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	95 b1       	in	r25, 0x05	; 5
}
  e0:	08 95       	ret

000000e2 <main>:
int main(void)
{
	int read;
	DDRB = 0xFF;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	87 bb       	out	0x17, r24	; 23
	ADC_init();
  e6:	e5 df       	rcall	.-54     	; 0xb2 <ADC_init>

	while(1)
	{
		read = read_ADC();
  e8:	f7 df       	rcall	.-18     	; 0xd8 <read_ADC>
  ea:	64 e6       	ldi	r22, 0x64	; 100
		switch(read/100)
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	24 d0       	rcall	.+72     	; 0x138 <__divmodhi4>
  f0:	fb 01       	movw	r30, r22
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	ea 30       	cpi	r30, 0x0A	; 10
  f6:	f1 05       	cpc	r31, r1
  f8:	e8 f4       	brcc	.+58     	; 0x134 <main+0x52>
  fa:	ea 5b       	subi	r30, 0xBA	; 186
  fc:	ff 4f       	sbci	r31, 0xFF	; 255
  fe:	2f c0       	rjmp	.+94     	; 0x15e <__tablejump2__>
 100:	8f ef       	ldi	r24, 0xFF	; 255
		{
			case 10   :    PORTB = 0b11111111;   break;
 102:	88 bb       	out	0x18, r24	; 24
 104:	f1 cf       	rjmp	.-30     	; 0xe8 <main+0x6>
 106:	8f e7       	ldi	r24, 0x7F	; 127
			case 9   :    PORTB = 0b01111111;   break;
 108:	88 bb       	out	0x18, r24	; 24
 10a:	ee cf       	rjmp	.-36     	; 0xe8 <main+0x6>
 10c:	8f e3       	ldi	r24, 0x3F	; 63
			case 8   :    PORTB = 0b00111111;   break;
 10e:	88 bb       	out	0x18, r24	; 24
 110:	eb cf       	rjmp	.-42     	; 0xe8 <main+0x6>
 112:	8f e1       	ldi	r24, 0x1F	; 31
			case 7   :    PORTB = 0b00011111;   break;
 114:	88 bb       	out	0x18, r24	; 24
 116:	e8 cf       	rjmp	.-48     	; 0xe8 <main+0x6>
 118:	8f e0       	ldi	r24, 0x0F	; 15
			case 5   :    PORTB = 0b00001111;   break;
 11a:	88 bb       	out	0x18, r24	; 24
 11c:	e5 cf       	rjmp	.-54     	; 0xe8 <main+0x6>
 11e:	87 e0       	ldi	r24, 0x07	; 7
			case 4   :    PORTB = 0b00000111;   break;
 120:	88 bb       	out	0x18, r24	; 24
 122:	e2 cf       	rjmp	.-60     	; 0xe8 <main+0x6>
 124:	83 e0       	ldi	r24, 0x03	; 3
			case 3   :    PORTB = 0b00000011;   break;
 126:	88 bb       	out	0x18, r24	; 24
 128:	df cf       	rjmp	.-66     	; 0xe8 <main+0x6>
 12a:	81 e0       	ldi	r24, 0x01	; 1
			case 2   :    PORTB = 0b00000001;   break;
 12c:	88 bb       	out	0x18, r24	; 24
 12e:	dc cf       	rjmp	.-72     	; 0xe8 <main+0x6>
 130:	18 ba       	out	0x18, r1	; 24
			case 1   :    PORTB = 0b00000000;   break;
 132:	da cf       	rjmp	.-76     	; 0xe8 <main+0x6>
 134:	18 ba       	out	0x18, r1	; 24
			default   :    PORTB = 0b00000000;
 136:	d8 cf       	rjmp	.-80     	; 0xe8 <main+0x6>

00000138 <__divmodhi4>:
 138:	97 fb       	bst	r25, 7
 13a:	07 2e       	mov	r0, r23
 13c:	16 f4       	brtc	.+4      	; 0x142 <__divmodhi4+0xa>
 13e:	00 94       	com	r0
 140:	06 d0       	rcall	.+12     	; 0x14e <__divmodhi4_neg1>
 142:	77 fd       	sbrc	r23, 7
 144:	08 d0       	rcall	.+16     	; 0x156 <__divmodhi4_neg2>
 146:	14 d0       	rcall	.+40     	; 0x170 <__udivmodhi4>
 148:	07 fc       	sbrc	r0, 7
 14a:	05 d0       	rcall	.+10     	; 0x156 <__divmodhi4_neg2>
 14c:	3e f4       	brtc	.+14     	; 0x15c <__divmodhi4_exit>

0000014e <__divmodhi4_neg1>:
 14e:	90 95       	com	r25
 150:	81 95       	neg	r24
 152:	9f 4f       	sbci	r25, 0xFF	; 255
 154:	08 95       	ret

00000156 <__divmodhi4_neg2>:
 156:	70 95       	com	r23
 158:	61 95       	neg	r22
 15a:	7f 4f       	sbci	r23, 0xFF	; 255

0000015c <__divmodhi4_exit>:
 15c:	08 95       	ret

0000015e <__tablejump2__>:
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	00 24       	eor	r0, r0
 164:	00 1c       	adc	r0, r0
 166:	0b be       	out	0x3b, r0	; 59
 168:	07 90       	elpm	r0, Z+
 16a:	f6 91       	elpm	r31, Z
 16c:	e0 2d       	mov	r30, r0
 16e:	09 94       	ijmp

00000170 <__udivmodhi4>:
 170:	aa 1b       	sub	r26, r26
 172:	bb 1b       	sub	r27, r27
 174:	51 e1       	ldi	r21, 0x11	; 17
 176:	07 c0       	rjmp	.+14     	; 0x186 <__udivmodhi4_ep>

00000178 <__udivmodhi4_loop>:
 178:	aa 1f       	adc	r26, r26
 17a:	bb 1f       	adc	r27, r27
 17c:	a6 17       	cp	r26, r22
 17e:	b7 07       	cpc	r27, r23
 180:	10 f0       	brcs	.+4      	; 0x186 <__udivmodhi4_ep>
 182:	a6 1b       	sub	r26, r22
 184:	b7 0b       	sbc	r27, r23

00000186 <__udivmodhi4_ep>:
 186:	88 1f       	adc	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	5a 95       	dec	r21
 18c:	a9 f7       	brne	.-22     	; 0x178 <__udivmodhi4_loop>
 18e:	80 95       	com	r24
 190:	90 95       	com	r25
 192:	bc 01       	movw	r22, r24
 194:	cd 01       	movw	r24, r26
 196:	08 95       	ret

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
