
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000023c  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e64  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d0  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d8  00000000  00000000  00001abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001f94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000477  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005c3  00000000  00000000  000024cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002a8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e3       	ldi	r30, 0x3C	; 60
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	b3 d0       	rcall	.+358    	; 0x21a <main>
  b4:	c1 c0       	rjmp	.+386    	; 0x238 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <LCD_rCommand>:
	
	_delay_us(1);
}
void LCD_setcursor(char col, char row)
{
	LCD_wBCommand(0x80 | col * 0x40 + row);
  b8:	1a ba       	out	0x1a, r1	; 26
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	8e 7f       	andi	r24, 0xFE	; 254
  be:	85 bb       	out	0x15, r24	; 21
  c0:	85 b3       	in	r24, 0x15	; 21
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	85 bb       	out	0x15, r24	; 21
  c6:	85 b3       	in	r24, 0x15	; 21
  c8:	84 60       	ori	r24, 0x04	; 4
  ca:	85 bb       	out	0x15, r24	; 21
  cc:	85 e0       	ldi	r24, 0x05	; 5
  ce:	8a 95       	dec	r24
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_rCommand+0x16>
  d2:	00 00       	nop
  d4:	89 b3       	in	r24, 0x19	; 25
  d6:	95 e0       	ldi	r25, 0x05	; 5
  d8:	9a 95       	dec	r25
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCD_rCommand+0x20>
  dc:	00 00       	nop
  de:	95 b3       	in	r25, 0x15	; 21
  e0:	9b 7f       	andi	r25, 0xFB	; 251
  e2:	95 bb       	out	0x15, r25	; 21
  e4:	9f ef       	ldi	r25, 0xFF	; 255
  e6:	9a bb       	out	0x1a, r25	; 26
  e8:	95 e0       	ldi	r25, 0x05	; 5
  ea:	9a 95       	dec	r25
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_rCommand+0x32>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <LCD_BusyCheck>:
  f2:	88 23       	and	r24, r24
  f4:	14 f4       	brge	.+4      	; 0xfa <LCD_BusyCheck+0x8>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	08 95       	ret
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	08 95       	ret

000000fe <LCD_wCommand>:
  fe:	95 b3       	in	r25, 0x15	; 21
 100:	9e 7f       	andi	r25, 0xFE	; 254
 102:	95 bb       	out	0x15, r25	; 21
 104:	95 b3       	in	r25, 0x15	; 21
 106:	9d 7f       	andi	r25, 0xFD	; 253
 108:	95 bb       	out	0x15, r25	; 21
 10a:	95 b3       	in	r25, 0x15	; 21
 10c:	94 60       	ori	r25, 0x04	; 4
 10e:	95 bb       	out	0x15, r25	; 21
 110:	8b bb       	out	0x1b, r24	; 27
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	8a 95       	dec	r24
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_wCommand+0x16>
 118:	00 00       	nop
 11a:	85 b3       	in	r24, 0x15	; 21
 11c:	8b 7f       	andi	r24, 0xFB	; 251
 11e:	85 bb       	out	0x15, r24	; 21
 120:	85 e0       	ldi	r24, 0x05	; 5
 122:	8a 95       	dec	r24
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_wCommand+0x24>
 126:	00 00       	nop
 128:	08 95       	ret

0000012a <LCD_wBCommand>:
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24
 12e:	04 c0       	rjmp	.+8      	; 0x138 <LCD_wBCommand+0xe>
 130:	85 e0       	ldi	r24, 0x05	; 5
 132:	8a 95       	dec	r24
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_wBCommand+0x8>
 136:	00 00       	nop
 138:	bf df       	rcall	.-130    	; 0xb8 <LCD_rCommand>
 13a:	db df       	rcall	.-74     	; 0xf2 <LCD_BusyCheck>
 13c:	81 11       	cpse	r24, r1
 13e:	f8 cf       	rjmp	.-16     	; 0x130 <LCD_wBCommand+0x6>
 140:	85 b3       	in	r24, 0x15	; 21
 142:	8e 7f       	andi	r24, 0xFE	; 254
 144:	85 bb       	out	0x15, r24	; 21
 146:	85 b3       	in	r24, 0x15	; 21
 148:	8d 7f       	andi	r24, 0xFD	; 253
 14a:	85 bb       	out	0x15, r24	; 21
 14c:	85 b3       	in	r24, 0x15	; 21
 14e:	84 60       	ori	r24, 0x04	; 4
 150:	85 bb       	out	0x15, r24	; 21
 152:	cb bb       	out	0x1b, r28	; 27
 154:	85 e0       	ldi	r24, 0x05	; 5
 156:	8a 95       	dec	r24
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_wBCommand+0x2c>
 15a:	00 00       	nop
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	8b 7f       	andi	r24, 0xFB	; 251
 160:	85 bb       	out	0x15, r24	; 21
 162:	85 e0       	ldi	r24, 0x05	; 5
 164:	8a 95       	dec	r24
 166:	f1 f7       	brne	.-4      	; 0x164 <LCD_wBCommand+0x3a>
 168:	00 00       	nop
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	81 ee       	ldi	r24, 0xE1	; 225
 172:	94 e0       	ldi	r25, 0x04	; 4
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <LCD_Init+0x6>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_Init+0x10>
 17e:	00 00       	nop

// 텍스트 LCD를 초기화하는 함수
void LCD_Init(void){
	_delay_ms(100);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
 180:	88 e3       	ldi	r24, 0x38	; 56
 182:	bd df       	rcall	.-134    	; 0xfe <LCD_wCommand>
 184:	8f e3       	ldi	r24, 0x3F	; 63
 186:	9c e9       	ldi	r25, 0x9C	; 156
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_Init+0x1a>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_Init+0x20>
 18e:	00 00       	nop
	_delay_ms(10);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
 190:	88 e3       	ldi	r24, 0x38	; 56
 192:	b5 df       	rcall	.-150    	; 0xfe <LCD_wCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	8f e1       	ldi	r24, 0x1F	; 31
 196:	93 e0       	ldi	r25, 0x03	; 3
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_Init+0x2a>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_Init+0x30>
	_delay_us(200);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
 19e:	00 00       	nop
 1a0:	88 e3       	ldi	r24, 0x38	; 56
 1a2:	ad df       	rcall	.-166    	; 0xfe <LCD_wCommand>
 1a4:	8f e1       	ldi	r24, 0x1F	; 31
 1a6:	93 e0       	ldi	r25, 0x03	; 3
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCD_Init+0x3a>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCD_Init+0x40>
	_delay_us(200);
	
	// 비지 플래그를 체크하는 Function Set
	LCD_wBCommand(0x38);
 1ae:	00 00       	nop
 1b0:	88 e3       	ldi	r24, 0x38	; 56
	// 비지 플래그를 체크하는 Display On/Off Control
	LCD_wBCommand(0x0c);
 1b2:	bb df       	rcall	.-138    	; 0x12a <LCD_wBCommand>
 1b4:	8c e0       	ldi	r24, 0x0C	; 12
 1b6:	b9 df       	rcall	.-142    	; 0x12a <LCD_wBCommand>
	// 비지 플래그를 체크하는 Clear Display
	LCD_wBCommand(0x01);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	b7 cf       	rjmp	.-146    	; 0x12a <LCD_wBCommand>
 1bc:	08 95       	ret

000001be <LCD_wData>:
 1be:	cf 93       	push	r28
}

// 텍스트 LCD에 1바이트 데이터를 출력하는 함수
void LCD_wData(char dat){
 1c0:	c8 2f       	mov	r28, r24
	while(LCD_BusyCheck(LCD_rCommand()))
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <LCD_wData+0xe>
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCD_wData+0x8>
 1ca:	00 00       	nop
 1cc:	75 df       	rcall	.-278    	; 0xb8 <LCD_rCommand>
 1ce:	91 df       	rcall	.-222    	; 0xf2 <LCD_BusyCheck>
 1d0:	81 11       	cpse	r24, r1
 1d2:	f8 cf       	rjmp	.-16     	; 0x1c4 <LCD_wData+0x6>
	_delay_us(1);
	
	sbi(LCD_CON, LCD_RS); // 0번 비트 설정, RS = 1, 데이터
 1d4:	85 b3       	in	r24, 0x15	; 21
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	85 bb       	out	0x15, r24	; 21
	cbi(LCD_CON, LCD_RW); // 1번 비트 클리어, RW = 0, 쓰기
 1da:	85 b3       	in	r24, 0x15	; 21
 1dc:	8d 7f       	andi	r24, 0xFD	; 253
 1de:	85 bb       	out	0x15, r24	; 21
	sbi(LCD_CON, LCD_E); // 2번 비트 설정, E = 1
 1e0:	85 b3       	in	r24, 0x15	; 21
 1e2:	84 60       	ori	r24, 0x04	; 4
 1e4:	85 bb       	out	0x15, r24	; 21
	
	LCD_DATA = dat;       // 데이터 출력
 1e6:	cb bb       	out	0x1b, r28	; 27
 1e8:	85 e0       	ldi	r24, 0x05	; 5
 1ea:	8a 95       	dec	r24
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCD_wData+0x2c>
 1ee:	00 00       	nop
	_delay_us(1);
	cbi(LCD_CON, LCD_E);  // 데이터 쓰기 동작 끝
 1f0:	85 b3       	in	r24, 0x15	; 21
 1f2:	8b 7f       	andi	r24, 0xFB	; 251
 1f4:	85 bb       	out	0x15, r24	; 21
 1f6:	85 e0       	ldi	r24, 0x05	; 5
 1f8:	8a 95       	dec	r24
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCD_wData+0x3a>
 1fc:	00 00       	nop
	
	_delay_us(1);
}
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <LCD_wString>:

// 텍스트 LCD에 문자열을 출력하는 함수
void LCD_wString(char *str){
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ec 01       	movw	r28, r24
	while(*str)
 208:	02 c0       	rjmp	.+4      	; 0x20e <LCD_wString+0xc>
	LCD_wData(*str++);
 20a:	21 96       	adiw	r28, 0x01	; 1
 20c:	d8 df       	rcall	.-80     	; 0x1be <LCD_wData>
	_delay_us(1);
}

// 텍스트 LCD에 문자열을 출력하는 함수
void LCD_wString(char *str){
	while(*str)
 20e:	88 81       	ld	r24, Y
 210:	81 11       	cpse	r24, r1
 212:	fb cf       	rjmp	.-10     	; 0x20a <LCD_wString+0x8>
	LCD_wData(*str++);
}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <main>:

#include "lcd.h"

int main(void)
{
	DDRC = 0xFF;
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	84 bb       	out	0x14, r24	; 20
	DDRA = 0xFF;
 21e:	8a bb       	out	0x1a, r24	; 26

	LCD_Init();
 220:	a6 df       	rcall	.-180    	; 0x16e <LCD_Init>
	LCD_wBCommand(0x80 | 0x00);
 222:	80 e8       	ldi	r24, 0x80	; 128
 224:	82 df       	rcall	.-252    	; 0x12a <LCD_wBCommand>
	LCD_wString("MOON");
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	91 e0       	ldi	r25, 0x01	; 1
	LCD_wBCommand(0x80 | 0x40);
 22a:	eb df       	rcall	.-42     	; 0x202 <LCD_wString>
 22c:	80 ec       	ldi	r24, 0xC0	; 192
	LCD_wString("Hello!");
 22e:	7d df       	rcall	.-262    	; 0x12a <LCD_wBCommand>
 230:	85 e0       	ldi	r24, 0x05	; 5
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	e6 df       	rcall	.-52     	; 0x202 <LCD_wString>
 236:	ff cf       	rjmp	.-2      	; 0x236 <main+0x1c>

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
