
DHT11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000b16  00000b8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b16  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000bce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c2c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014db  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009c2  00000000  00000000  000021db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007af  00000000  00000000  00002b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  0000334c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000514  00000000  00000000  000034e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a5c  00000000  00000000  000039f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00004450  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	fe c0       	rjmp	.+508    	; 0x246 <__vector_18>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e1       	ldi	r30, 0x16	; 22
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 34       	cpi	r26, 0x44	; 68
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	3c d1       	rcall	.+632    	; 0x32c <main>
  b4:	2e c5       	rjmp	.+2652   	; 0xb12 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <LCD_rCommand>:
	
	_delay_us(1);
}
void LCD_setcursor(char col, char row)
{
	LCD_wBCommand(0x80 | col * 0x40 + row);
  b8:	1a ba       	out	0x1a, r1	; 26
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	8e 7f       	andi	r24, 0xFE	; 254
  be:	85 bb       	out	0x15, r24	; 21
  c0:	85 b3       	in	r24, 0x15	; 21
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	85 bb       	out	0x15, r24	; 21
  c6:	85 b3       	in	r24, 0x15	; 21
  c8:	84 60       	ori	r24, 0x04	; 4
  ca:	85 bb       	out	0x15, r24	; 21
  cc:	85 e0       	ldi	r24, 0x05	; 5
  ce:	8a 95       	dec	r24
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_rCommand+0x16>
  d2:	00 00       	nop
  d4:	89 b3       	in	r24, 0x19	; 25
  d6:	95 e0       	ldi	r25, 0x05	; 5
  d8:	9a 95       	dec	r25
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCD_rCommand+0x20>
  dc:	00 00       	nop
  de:	95 b3       	in	r25, 0x15	; 21
  e0:	9b 7f       	andi	r25, 0xFB	; 251
  e2:	95 bb       	out	0x15, r25	; 21
  e4:	9f ef       	ldi	r25, 0xFF	; 255
  e6:	9a bb       	out	0x1a, r25	; 26
  e8:	95 e0       	ldi	r25, 0x05	; 5
  ea:	9a 95       	dec	r25
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_rCommand+0x32>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <LCD_BusyCheck>:
  f2:	88 23       	and	r24, r24
  f4:	14 f4       	brge	.+4      	; 0xfa <LCD_BusyCheck+0x8>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	08 95       	ret
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	08 95       	ret

000000fe <LCD_wCommand>:
  fe:	95 b3       	in	r25, 0x15	; 21
 100:	9e 7f       	andi	r25, 0xFE	; 254
 102:	95 bb       	out	0x15, r25	; 21
 104:	95 b3       	in	r25, 0x15	; 21
 106:	9d 7f       	andi	r25, 0xFD	; 253
 108:	95 bb       	out	0x15, r25	; 21
 10a:	95 b3       	in	r25, 0x15	; 21
 10c:	94 60       	ori	r25, 0x04	; 4
 10e:	95 bb       	out	0x15, r25	; 21
 110:	8b bb       	out	0x1b, r24	; 27
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	8a 95       	dec	r24
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_wCommand+0x16>
 118:	00 00       	nop
 11a:	85 b3       	in	r24, 0x15	; 21
 11c:	8b 7f       	andi	r24, 0xFB	; 251
 11e:	85 bb       	out	0x15, r24	; 21
 120:	85 e0       	ldi	r24, 0x05	; 5
 122:	8a 95       	dec	r24
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_wCommand+0x24>
 126:	00 00       	nop
 128:	08 95       	ret

0000012a <LCD_wBCommand>:
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24
 12e:	04 c0       	rjmp	.+8      	; 0x138 <LCD_wBCommand+0xe>
 130:	85 e0       	ldi	r24, 0x05	; 5
 132:	8a 95       	dec	r24
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_wBCommand+0x8>
 136:	00 00       	nop
 138:	bf df       	rcall	.-130    	; 0xb8 <LCD_rCommand>
 13a:	db df       	rcall	.-74     	; 0xf2 <LCD_BusyCheck>
 13c:	81 11       	cpse	r24, r1
 13e:	f8 cf       	rjmp	.-16     	; 0x130 <LCD_wBCommand+0x6>
 140:	85 b3       	in	r24, 0x15	; 21
 142:	8e 7f       	andi	r24, 0xFE	; 254
 144:	85 bb       	out	0x15, r24	; 21
 146:	85 b3       	in	r24, 0x15	; 21
 148:	8d 7f       	andi	r24, 0xFD	; 253
 14a:	85 bb       	out	0x15, r24	; 21
 14c:	85 b3       	in	r24, 0x15	; 21
 14e:	84 60       	ori	r24, 0x04	; 4
 150:	85 bb       	out	0x15, r24	; 21
 152:	cb bb       	out	0x1b, r28	; 27
 154:	85 e0       	ldi	r24, 0x05	; 5
 156:	8a 95       	dec	r24
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_wBCommand+0x2c>
 15a:	00 00       	nop
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	8b 7f       	andi	r24, 0xFB	; 251
 160:	85 bb       	out	0x15, r24	; 21
 162:	85 e0       	ldi	r24, 0x05	; 5
 164:	8a 95       	dec	r24
 166:	f1 f7       	brne	.-4      	; 0x164 <LCD_wBCommand+0x3a>
 168:	00 00       	nop
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	81 ee       	ldi	r24, 0xE1	; 225
 172:	94 e0       	ldi	r25, 0x04	; 4
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <LCD_Init+0x6>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_Init+0x10>
 17e:	00 00       	nop

// 텍스트 LCD를 초기화하는 함수
void LCD_Init(void){
	_delay_ms(100);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
 180:	88 e3       	ldi	r24, 0x38	; 56
 182:	bd df       	rcall	.-134    	; 0xfe <LCD_wCommand>
 184:	8f e3       	ldi	r24, 0x3F	; 63
 186:	9c e9       	ldi	r25, 0x9C	; 156
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_Init+0x1a>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_Init+0x20>
 18e:	00 00       	nop
	_delay_ms(10);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
 190:	88 e3       	ldi	r24, 0x38	; 56
 192:	b5 df       	rcall	.-150    	; 0xfe <LCD_wCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	8f e1       	ldi	r24, 0x1F	; 31
 196:	93 e0       	ldi	r25, 0x03	; 3
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_Init+0x2a>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_Init+0x30>
	_delay_us(200);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
 19e:	00 00       	nop
 1a0:	88 e3       	ldi	r24, 0x38	; 56
 1a2:	ad df       	rcall	.-166    	; 0xfe <LCD_wCommand>
 1a4:	8f e1       	ldi	r24, 0x1F	; 31
 1a6:	93 e0       	ldi	r25, 0x03	; 3
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCD_Init+0x3a>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCD_Init+0x40>
	_delay_us(200);
	
	// 비지 플래그를 체크하는 Function Set
	LCD_wBCommand(0x38);
 1ae:	00 00       	nop
 1b0:	88 e3       	ldi	r24, 0x38	; 56
	// 비지 플래그를 체크하는 Display On/Off Control
	LCD_wBCommand(0x0c);
 1b2:	bb df       	rcall	.-138    	; 0x12a <LCD_wBCommand>
 1b4:	8c e0       	ldi	r24, 0x0C	; 12
 1b6:	b9 df       	rcall	.-142    	; 0x12a <LCD_wBCommand>
	// 비지 플래그를 체크하는 Clear Display
	LCD_wBCommand(0x01);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	b7 cf       	rjmp	.-146    	; 0x12a <LCD_wBCommand>
 1bc:	08 95       	ret

000001be <LCD_wData>:
 1be:	cf 93       	push	r28
}

// 텍스트 LCD에 1바이트 데이터를 출력하는 함수
void LCD_wData(char dat){
 1c0:	c8 2f       	mov	r28, r24
	while(LCD_BusyCheck(LCD_rCommand()))
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <LCD_wData+0xe>
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCD_wData+0x8>
 1ca:	00 00       	nop
 1cc:	75 df       	rcall	.-278    	; 0xb8 <LCD_rCommand>
 1ce:	91 df       	rcall	.-222    	; 0xf2 <LCD_BusyCheck>
 1d0:	81 11       	cpse	r24, r1
 1d2:	f8 cf       	rjmp	.-16     	; 0x1c4 <LCD_wData+0x6>
	_delay_us(1);
	
	sbi(LCD_CON, LCD_RS); // 0번 비트 설정, RS = 1, 데이터
 1d4:	85 b3       	in	r24, 0x15	; 21
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	85 bb       	out	0x15, r24	; 21
	cbi(LCD_CON, LCD_RW); // 1번 비트 클리어, RW = 0, 쓰기
 1da:	85 b3       	in	r24, 0x15	; 21
 1dc:	8d 7f       	andi	r24, 0xFD	; 253
 1de:	85 bb       	out	0x15, r24	; 21
	sbi(LCD_CON, LCD_E); // 2번 비트 설정, E = 1
 1e0:	85 b3       	in	r24, 0x15	; 21
 1e2:	84 60       	ori	r24, 0x04	; 4
 1e4:	85 bb       	out	0x15, r24	; 21
	
	LCD_DATA = dat;       // 데이터 출력
 1e6:	cb bb       	out	0x1b, r28	; 27
 1e8:	85 e0       	ldi	r24, 0x05	; 5
 1ea:	8a 95       	dec	r24
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCD_wData+0x2c>
 1ee:	00 00       	nop
	_delay_us(1);
	cbi(LCD_CON, LCD_E);  // 데이터 쓰기 동작 끝
 1f0:	85 b3       	in	r24, 0x15	; 21
 1f2:	8b 7f       	andi	r24, 0xFB	; 251
 1f4:	85 bb       	out	0x15, r24	; 21
 1f6:	85 e0       	ldi	r24, 0x05	; 5
 1f8:	8a 95       	dec	r24
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCD_wData+0x3a>
 1fc:	00 00       	nop
	
	_delay_us(1);
}
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <LCD_wString>:

// 텍스트 LCD에 문자열을 출력하는 함수
void LCD_wString(char *str){
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ec 01       	movw	r28, r24
	while(*str)
 208:	02 c0       	rjmp	.+4      	; 0x20e <LCD_wString+0xc>
	LCD_wData(*str++);
 20a:	21 96       	adiw	r28, 0x01	; 1
 20c:	d8 df       	rcall	.-80     	; 0x1be <LCD_wData>
	_delay_us(1);
}

// 텍스트 LCD에 문자열을 출력하는 함수
void LCD_wString(char *str){
	while(*str)
 20e:	88 81       	ld	r24, Y
 210:	81 11       	cpse	r24, r1
 212:	fb cf       	rjmp	.-10     	; 0x20a <LCD_wString+0x8>
	LCD_wData(*str++);
}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <uart_init>:
#define PULSE_MAX   6000


void uart_init(unsigned int baud)
{
	UBRR0H = (unsigned char)(baud >> 8);
 21a:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)baud;
 21e:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1 << TXEN0) | (1 << RXEN0) | (1<<RXCIE0);
 220:	88 e9       	ldi	r24, 0x98	; 152
 222:	8a b9       	out	0x0a, r24	; 10
 224:	08 95       	ret

00000226 <uart_write>:
} // 8bit, no parity, 1 stop bit, TX enable, RX ISR enable

void uart_write(unsigned char data)
{
	while (!(UCSR0A & (1 << UDRE0)));
 226:	5d 9b       	sbis	0x0b, 5	; 11
 228:	fe cf       	rjmp	.-4      	; 0x226 <uart_write>
	// wait for sending
	UDR0 = data; // send
 22a:	8c b9       	out	0x0c, r24	; 12
 22c:	08 95       	ret

0000022e <uart_string>:
}

void uart_string(char* str)
{
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	ec 01       	movw	r28, r24
	while (*str)
 234:	02 c0       	rjmp	.+4      	; 0x23a <uart_string+0xc>
	uart_write(*str++);
 236:	21 96       	adiw	r28, 0x01	; 1
 238:	f6 df       	rcall	.-20     	; 0x226 <uart_write>
	UDR0 = data; // send
}

void uart_string(char* str)
{
	while (*str)
 23a:	88 81       	ld	r24, Y
 23c:	81 11       	cpse	r24, r1
 23e:	fb cf       	rjmp	.-10     	; 0x236 <uart_string+0x8>
	uart_write(*str++);
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <__vector_18>:

ISR(USART0_RX_vect)
{
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	0b b6       	in	r0, 0x3b	; 59
 252:	0f 92       	push	r0
 254:	2f 93       	push	r18
 256:	3f 93       	push	r19
 258:	4f 93       	push	r20
 25a:	5f 93       	push	r21
 25c:	6f 93       	push	r22
 25e:	7f 93       	push	r23
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	af 93       	push	r26
 266:	bf 93       	push	r27
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
	unsigned char buf = UDR0;
 26c:	8c b1       	in	r24, 0x0c	; 12
	uart_write(buf - 'a' + 'A');
 26e:	80 52       	subi	r24, 0x20	; 32
 270:	da df       	rcall	.-76     	; 0x226 <uart_write>
}
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	bf 91       	pop	r27
 278:	af 91       	pop	r26
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	7f 91       	pop	r23
 280:	6f 91       	pop	r22
 282:	5f 91       	pop	r21
 284:	4f 91       	pop	r20
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0b be       	out	0x3b, r0	; 59
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <Request>:

void Request()
{
	DHT_DDR |= (1<<DHT);
 298:	81 b3       	in	r24, 0x11	; 17
 29a:	80 64       	ori	r24, 0x40	; 64
 29c:	81 bb       	out	0x11, r24	; 17
	DHT_PORT &= ~(1<<DHT);
 29e:	82 b3       	in	r24, 0x12	; 18
 2a0:	8f 7b       	andi	r24, 0xBF	; 191
 2a2:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a4:	2f ef       	ldi	r18, 0xFF	; 255
 2a6:	89 ef       	ldi	r24, 0xF9	; 249
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	21 50       	subi	r18, 0x01	; 1
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <Request+0x12>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <Request+0x1c>
 2b4:	00 00       	nop
	_delay_ms(20);
	DHT_PORT |= (1<<DHT);
 2b6:	82 b3       	in	r24, 0x12	; 18
 2b8:	80 64       	ori	r24, 0x40	; 64
 2ba:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2bc:	25 ed       	ldi	r18, 0xD5	; 213
 2be:	2a 95       	dec	r18
 2c0:	f1 f7       	brne	.-4      	; 0x2be <Request+0x26>
 2c2:	00 00       	nop
	_delay_us(40);
	
	DHT_DDR &= ~(1<<DHT);
 2c4:	81 b3       	in	r24, 0x11	; 17
 2c6:	8f 7b       	andi	r24, 0xBF	; 191
 2c8:	81 bb       	out	0x11, r24	; 17
	while(DHT_PIN & (1<<DHT));
 2ca:	86 99       	sbic	0x10, 6	; 16
 2cc:	fe cf       	rjmp	.-4      	; 0x2ca <Request+0x32>
	while((DHT_PIN & (1<<DHT))==0);
 2ce:	86 9b       	sbis	0x10, 6	; 16
 2d0:	fe cf       	rjmp	.-4      	; 0x2ce <Request+0x36>
	while(DHT_PIN & (1<<DHT));
 2d2:	86 99       	sbic	0x10, 6	; 16
 2d4:	fe cf       	rjmp	.-4      	; 0x2d2 <Request+0x3a>
}
 2d6:	08 95       	ret

000002d8 <InitializeTimer1>:

void InitializeTimer1(void)
{
	TCCR1A |= (1 << WGM11);
 2d8:	8f b5       	in	r24, 0x2f	; 47
 2da:	82 60       	ori	r24, 0x02	; 2
 2dc:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (1 << WGM13);
 2de:	8e b5       	in	r24, 0x2e	; 46
 2e0:	88 61       	ori	r24, 0x18	; 24
 2e2:	8e bd       	out	0x2e, r24	; 46

	TCCR1A |= (1 << COM1A1);
 2e4:	8f b5       	in	r24, 0x2f	; 47
 2e6:	80 68       	ori	r24, 0x80	; 128
 2e8:	8f bd       	out	0x2f, r24	; 47

	TCCR1B |= (1 << CS11);
 2ea:	8e b5       	in	r24, 0x2e	; 46
 2ec:	82 60       	ori	r24, 0x02	; 2
 2ee:	8e bd       	out	0x2e, r24	; 46

	ICR1 = 39999;
 2f0:	8f e3       	ldi	r24, 0x3F	; 63
 2f2:	9c e9       	ldi	r25, 0x9C	; 156
 2f4:	97 bd       	out	0x27, r25	; 39
 2f6:	86 bd       	out	0x26, r24	; 38
 2f8:	08 95       	ret

000002fa <Receive_data>:
}

uint8_t Receive_data()
{
	uint8_t c = 0;
	for (int i = 0; i < 8; i++)
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	30 e0       	ldi	r19, 0x00	; 0
	ICR1 = 39999;
}

uint8_t Receive_data()
{
	uint8_t c = 0;
 2fe:	80 e0       	ldi	r24, 0x00	; 0
	for (int i = 0; i < 8; i++)
 300:	11 c0       	rjmp	.+34     	; 0x324 <Receive_data+0x2a>
	{
		while((DHT_PIN & (1<<DHT)) == 0);     /* check received bit 0 or 1 */
 302:	86 9b       	sbis	0x10, 6	; 16
 304:	fe cf       	rjmp	.-4      	; 0x302 <Receive_data+0x8>
 306:	90 ea       	ldi	r25, 0xA0	; 160
 308:	9a 95       	dec	r25
 30a:	f1 f7       	brne	.-4      	; 0x308 <Receive_data+0xe>
		_delay_us(30);
		if(DHT_PIN & (1<<DHT))             /* if high pulse is greater than 30ms */
 30c:	86 9b       	sbis	0x10, 6	; 16
 30e:	05 c0       	rjmp	.+10     	; 0x31a <Receive_data+0x20>
		{
			c = (c<<1)|(0x01);               /* then its logic HIGH */
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	81 60       	ori	r24, 0x01	; 1
 318:	01 c0       	rjmp	.+2      	; 0x31c <Receive_data+0x22>
		}
		else                           /* otherwise its logic LOW */
		{
			c = (c<<1);
 31a:	88 0f       	add	r24, r24
		}

		while(DHT_PIN & (1<<DHT));
 31c:	86 99       	sbic	0x10, 6	; 16
 31e:	fe cf       	rjmp	.-4      	; 0x31c <Receive_data+0x22>
}

uint8_t Receive_data()
{
	uint8_t c = 0;
	for (int i = 0; i < 8; i++)
 320:	2f 5f       	subi	r18, 0xFF	; 255
 322:	3f 4f       	sbci	r19, 0xFF	; 255
 324:	28 30       	cpi	r18, 0x08	; 8
 326:	31 05       	cpc	r19, r1
 328:	64 f3       	brlt	.-40     	; 0x302 <Receive_data+0x8>
		}

		while(DHT_PIN & (1<<DHT));
	}
	return c;
}
 32a:	08 95       	ret

0000032c <main>:

int main(void)
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	60 97       	sbiw	r28, 0x10	; 16
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	de bf       	out	0x3e, r29	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	cd bf       	out	0x3d, r28	; 61
	uint16_t I_Humi, D_Humi, I_Temp, D_Temp, check;
	DDRA = 0xFF;
 340:	8f ef       	ldi	r24, 0xFF	; 255
 342:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 344:	84 bb       	out	0x14, r24	; 20
	uart_init(BAUDRATE(9600));
 346:	87 e6       	ldi	r24, 0x67	; 103
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	67 df       	rcall	.-306    	; 0x21a <uart_init>
	LCD_Init();
 34c:	10 df       	rcall	.-480    	; 0x16e <LCD_Init>
 34e:	78 94       	sei
	sei();
 350:	80 e0       	ldi	r24, 0x00	; 0
	LCD_wString("hello");
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	56 df       	rcall	.-340    	; 0x202 <LCD_wString>
	

	while (1)
	{
		
		Request();             // 데이터 전송 요청
 356:	a0 df       	rcall	.-192    	; 0x298 <Request>
 358:	d0 df       	rcall	.-96     	; 0x2fa <Receive_data>
		I_Humi = Receive_data();      // 습도 상위 8비트 전송
 35a:	68 2e       	mov	r6, r24
 35c:	88 2e       	mov	r8, r24
 35e:	91 2c       	mov	r9, r1
		D_Humi = Receive_data();      // 습도 하위 8비트 전송
 360:	cc df       	rcall	.-104    	; 0x2fa <Receive_data>
 362:	c8 2e       	mov	r12, r24
 364:	d1 2c       	mov	r13, r1
		I_Temp = Receive_data();      // 온도 상위 8비트 전송
 366:	c9 df       	rcall	.-110    	; 0x2fa <Receive_data>
 368:	78 2e       	mov	r7, r24
 36a:	e8 2e       	mov	r14, r24
 36c:	f1 2c       	mov	r15, r1
		D_Temp = Receive_data();      // 온도 하위 8비트 전송
 36e:	c5 df       	rcall	.-118    	; 0x2fa <Receive_data>
 370:	a8 2e       	mov	r10, r24
 372:	b1 2c       	mov	r11, r1
 374:	c2 df       	rcall	.-124    	; 0x2fa <Receive_data>
		check = Receive_data();   // CheckSum 비트 = 습도 16비트 + 온도 16비트
 376:	28 2f       	mov	r18, r24
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	c4 01       	movw	r24, r8
 37c:	8c 0d       	add	r24, r12
	
		
		if ((I_Humi + D_Humi + I_Temp + D_Temp) != check)
 37e:	9d 1d       	adc	r25, r13
 380:	8e 0d       	add	r24, r14
 382:	9f 1d       	adc	r25, r15
 384:	8a 0d       	add	r24, r10
 386:	9b 1d       	adc	r25, r11
 388:	28 17       	cp	r18, r24
 38a:	39 07       	cpc	r19, r25
 38c:	19 f0       	breq	.+6      	; 0x394 <main+0x68>
 38e:	86 e0       	ldi	r24, 0x06	; 6
		{
			LCD_wString("Error");
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	37 df       	rcall	.-402    	; 0x202 <LCD_wString>
 394:	8e 01       	movw	r16, r28
		}
		char str[16] = {0,};
 396:	0f 5f       	subi	r16, 0xFF	; 255
 398:	1f 4f       	sbci	r17, 0xFF	; 255
 39a:	80 e1       	ldi	r24, 0x10	; 16
 39c:	f8 01       	movw	r30, r16
 39e:	11 92       	st	Z+, r1
 3a0:	8a 95       	dec	r24
 3a2:	e9 f7       	brne	.-6      	; 0x39e <main+0x72>
		LCD_wBCommand(0x80|0x00);
 3a4:	80 e8       	ldi	r24, 0x80	; 128
 3a6:	c1 de       	rcall	.-638    	; 0x12a <LCD_wBCommand>
		LCD_wString("Temp: ");
 3a8:	8c e0       	ldi	r24, 0x0C	; 12
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	2a df       	rcall	.-428    	; 0x202 <LCD_wString>
		LCD_wString(itoa(I_Temp, str, 10));
 3ae:	4a e0       	ldi	r20, 0x0A	; 10
 3b0:	50 e0       	ldi	r21, 0x00	; 0
 3b2:	b8 01       	movw	r22, r16
 3b4:	c7 01       	movw	r24, r14
 3b6:	95 d0       	rcall	.+298    	; 0x4e2 <itoa>
		LCD_wString(".");
 3b8:	24 df       	rcall	.-440    	; 0x202 <LCD_wString>
 3ba:	83 e1       	ldi	r24, 0x13	; 19
 3bc:	91 e0       	ldi	r25, 0x01	; 1
		LCD_wString(itoa(D_Temp, str, 10));
 3be:	21 df       	rcall	.-446    	; 0x202 <LCD_wString>
 3c0:	4a e0       	ldi	r20, 0x0A	; 10
 3c2:	50 e0       	ldi	r21, 0x00	; 0
 3c4:	b8 01       	movw	r22, r16
 3c6:	c5 01       	movw	r24, r10
 3c8:	8c d0       	rcall	.+280    	; 0x4e2 <itoa>
		LCD_wData(0b11011111);
 3ca:	1b df       	rcall	.-458    	; 0x202 <LCD_wString>
 3cc:	8f ed       	ldi	r24, 0xDF	; 223
		LCD_wData('C');
 3ce:	f7 de       	rcall	.-530    	; 0x1be <LCD_wData>
 3d0:	83 e4       	ldi	r24, 0x43	; 67
		LCD_wBCommand(0x80|0x40);
 3d2:	f5 de       	rcall	.-534    	; 0x1be <LCD_wData>
 3d4:	80 ec       	ldi	r24, 0xC0	; 192
		LCD_wString("Humi: ");
 3d6:	a9 de       	rcall	.-686    	; 0x12a <LCD_wBCommand>
 3d8:	85 e1       	ldi	r24, 0x15	; 21
 3da:	91 e0       	ldi	r25, 0x01	; 1
		LCD_wString(itoa(I_Humi, str, 10));
 3dc:	12 df       	rcall	.-476    	; 0x202 <LCD_wString>
 3de:	4a e0       	ldi	r20, 0x0A	; 10
 3e0:	50 e0       	ldi	r21, 0x00	; 0
 3e2:	b8 01       	movw	r22, r16
 3e4:	c4 01       	movw	r24, r8
 3e6:	7d d0       	rcall	.+250    	; 0x4e2 <itoa>
 3e8:	0c df       	rcall	.-488    	; 0x202 <LCD_wString>
		LCD_wString(".");
 3ea:	83 e1       	ldi	r24, 0x13	; 19
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	09 df       	rcall	.-494    	; 0x202 <LCD_wString>
		LCD_wString(itoa(D_Humi, str, 10));
 3f0:	4a e0       	ldi	r20, 0x0A	; 10
 3f2:	50 e0       	ldi	r21, 0x00	; 0
 3f4:	b8 01       	movw	r22, r16
 3f6:	c6 01       	movw	r24, r12
 3f8:	74 d0       	rcall	.+232    	; 0x4e2 <itoa>
 3fa:	03 df       	rcall	.-506    	; 0x202 <LCD_wString>
 3fc:	8c e1       	ldi	r24, 0x1C	; 28
 3fe:	91 e0       	ldi	r25, 0x01	; 1
		LCD_wString(" %");
 400:	00 df       	rcall	.-512    	; 0x202 <LCD_wString>
 402:	1f 92       	push	r1
 404:	6f 92       	push	r6
		sprintf(str, "%3d%3d", I_Temp, I_Humi);
 406:	1f 92       	push	r1
 408:	7f 92       	push	r7
 40a:	8f e1       	ldi	r24, 0x1F	; 31
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	9f 93       	push	r25
 410:	8f 93       	push	r24
 412:	1f 93       	push	r17
 414:	0f 93       	push	r16
 416:	92 d0       	rcall	.+292    	; 0x53c <sprintf>
 418:	c8 01       	movw	r24, r16
 41a:	09 df       	rcall	.-494    	; 0x22e <uart_string>
 41c:	0f b6       	in	r0, 0x3f	; 63
		uart_string(str);
 41e:	f8 94       	cli
 420:	de bf       	out	0x3e, r29	; 62
 422:	0f be       	out	0x3f, r0	; 63

		
		if(I_Temp>26)
 424:	cd bf       	out	0x3d, r28	; 61
 426:	9b e1       	ldi	r25, 0x1B	; 27
 428:	e9 16       	cp	r14, r25
 42a:	f1 04       	cpc	r15, r1
 42c:	60 f1       	brcs	.+88     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 42e:	87 b3       	in	r24, 0x17	; 23
 430:	80 62       	ori	r24, 0x20	; 32
 432:	87 bb       	out	0x17, r24	; 23
 434:	51 df       	rcall	.-350    	; 0x2d8 <InitializeTimer1>
		{    DDRB |= (1 << PB5);
 436:	88 ee       	ldi	r24, 0xE8	; 232
 438:	93 e0       	ldi	r25, 0x03	; 3
 43a:	9b bd       	out	0x2b, r25	; 43

			InitializeTimer1();
 43c:	8a bd       	out	0x2a, r24	; 42
 43e:	ef ef       	ldi	r30, 0xFF	; 255

			while(1)
			{
				OCR1A = PULSE_MIN;
 440:	f3 ed       	ldi	r31, 0xD3	; 211
 442:	20 e3       	ldi	r18, 0x30	; 48
 444:	e1 50       	subi	r30, 0x01	; 1
 446:	f0 40       	sbci	r31, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 448:	20 40       	sbci	r18, 0x00	; 0
 44a:	e1 f7       	brne	.-8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44e:	00 00       	nop
 450:	88 eb       	ldi	r24, 0xB8	; 184
 452:	9b e0       	ldi	r25, 0x0B	; 11
 454:	9b bd       	out	0x2b, r25	; 43
 456:	8a bd       	out	0x2a, r24	; 42
 458:	8f ef       	ldi	r24, 0xFF	; 255
				_delay_ms(ROTATION_DELAY);

				OCR1A = PULSE_MID;
 45a:	93 ed       	ldi	r25, 0xD3	; 211
 45c:	e0 e3       	ldi	r30, 0x30	; 48
 45e:	81 50       	subi	r24, 0x01	; 1
 460:	90 40       	sbci	r25, 0x00	; 0
 462:	e0 40       	sbci	r30, 0x00	; 0
 464:	e1 f7       	brne	.-8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 466:	00 c0       	rjmp	.+0      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 468:	00 00       	nop
 46a:	80 e7       	ldi	r24, 0x70	; 112
 46c:	97 e1       	ldi	r25, 0x17	; 23
 46e:	9b bd       	out	0x2b, r25	; 43
				_delay_ms(ROTATION_DELAY);

				OCR1A = PULSE_MAX;
 470:	8a bd       	out	0x2a, r24	; 42
 472:	ff ef       	ldi	r31, 0xFF	; 255
 474:	23 ed       	ldi	r18, 0xD3	; 211
 476:	80 e3       	ldi	r24, 0x30	; 48
 478:	f1 50       	subi	r31, 0x01	; 1
 47a:	20 40       	sbci	r18, 0x00	; 0
 47c:	80 40       	sbci	r24, 0x00	; 0
 47e:	e1 f7       	brne	.-8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 480:	00 c0       	rjmp	.+0      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 482:	00 00       	nop
 484:	d8 cf       	rjmp	.-80     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 486:	9a e1       	ldi	r25, 0x1A	; 26
				
			}

		}
		
		if(I_Temp==26)
 488:	e9 16       	cp	r14, r25
 48a:	f1 04       	cpc	r15, r1
 48c:	71 f4       	brne	.+28     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 48e:	80 e8       	ldi	r24, 0x80	; 128
		
		{
			LCD_wBCommand(0x80|0x00);
 490:	4c de       	rcall	.-872    	; 0x12a <LCD_wBCommand>
 492:	86 e2       	ldi	r24, 0x26	; 38
 494:	91 e0       	ldi	r25, 0x01	; 1
			LCD_wString("temp proper  ");
 496:	b5 de       	rcall	.-662    	; 0x202 <LCD_wString>
 498:	ef ef       	ldi	r30, 0xFF	; 255
 49a:	f3 e2       	ldi	r31, 0x23	; 35
 49c:	24 ef       	ldi	r18, 0xF4	; 244
 49e:	e1 50       	subi	r30, 0x01	; 1
 4a0:	f0 40       	sbci	r31, 0x00	; 0
 4a2:	20 40       	sbci	r18, 0x00	; 0
 4a4:	e1 f7       	brne	.-8      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4a8:	00 00       	nop
 4aa:	83 e3       	ldi	r24, 0x33	; 51
 4ac:	88 16       	cp	r8, r24
 4ae:	91 04       	cpc	r9, r1
			_delay_ms(5000);
		}
		
		
		
		if(I_Humi<=50)
 4b0:	70 f4       	brcc	.+28     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4b2:	80 ec       	ldi	r24, 0xC0	; 192
 4b4:	3a de       	rcall	.-908    	; 0x12a <LCD_wBCommand>
 4b6:	84 e3       	ldi	r24, 0x34	; 52
		
		{
			LCD_wBCommand(0x80|0x40);
 4b8:	91 e0       	ldi	r25, 0x01	; 1
 4ba:	a3 de       	rcall	.-698    	; 0x202 <LCD_wString>
 4bc:	9f ef       	ldi	r25, 0xFF	; 255
			LCD_wString("humi proper   ");
 4be:	e3 e2       	ldi	r30, 0x23	; 35
 4c0:	f4 ef       	ldi	r31, 0xF4	; 244
 4c2:	91 50       	subi	r25, 0x01	; 1
 4c4:	e0 40       	sbci	r30, 0x00	; 0
 4c6:	f0 40       	sbci	r31, 0x00	; 0
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4cc:	00 00       	nop
 4ce:	2f ef       	ldi	r18, 0xFF	; 255
 4d0:	8b e7       	ldi	r24, 0x7B	; 123
 4d2:	92 e9       	ldi	r25, 0x92	; 146
 4d4:	21 50       	subi	r18, 0x01	; 1
 4d6:	80 40       	sbci	r24, 0x00	; 0
 4d8:	90 40       	sbci	r25, 0x00	; 0
 4da:	e1 f7       	brne	.-8      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4de:	00 00       	nop
 4e0:	3a cf       	rjmp	.-396    	; 0x356 <main+0x2a>

000004e2 <itoa>:
 4e2:	45 32       	cpi	r20, 0x25	; 37
 4e4:	51 05       	cpc	r21, r1
 4e6:	18 f4       	brcc	.+6      	; 0x4ee <itoa+0xc>
 4e8:	42 30       	cpi	r20, 0x02	; 2

		
		
		
		_delay_ms(3000);
	}
 4ea:	08 f0       	brcs	.+2      	; 0x4ee <itoa+0xc>
 4ec:	04 c0       	rjmp	.+8      	; 0x4f6 <__itoa_ncheck>
 4ee:	fb 01       	movw	r30, r22
 4f0:	10 82       	st	Z, r1
 4f2:	cb 01       	movw	r24, r22
 4f4:	08 95       	ret

000004f6 <__itoa_ncheck>:
 4f6:	bb 27       	eor	r27, r27
 4f8:	4a 30       	cpi	r20, 0x0A	; 10
 4fa:	31 f4       	brne	.+12     	; 0x508 <__itoa_ncheck+0x12>
 4fc:	99 23       	and	r25, r25
 4fe:	22 f4       	brpl	.+8      	; 0x508 <__itoa_ncheck+0x12>
 500:	bd e2       	ldi	r27, 0x2D	; 45
 502:	90 95       	com	r25
 504:	81 95       	neg	r24
 506:	9f 4f       	sbci	r25, 0xFF	; 255
 508:	01 c0       	rjmp	.+2      	; 0x50c <__utoa_common>

0000050a <__utoa_ncheck>:
 50a:	bb 27       	eor	r27, r27

0000050c <__utoa_common>:
 50c:	fb 01       	movw	r30, r22
 50e:	55 27       	eor	r21, r21
 510:	aa 27       	eor	r26, r26
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	aa 1f       	adc	r26, r26
 518:	a4 17       	cp	r26, r20
 51a:	10 f0       	brcs	.+4      	; 0x520 <__utoa_common+0x14>
 51c:	a4 1b       	sub	r26, r20
 51e:	83 95       	inc	r24
 520:	50 51       	subi	r21, 0x10	; 16
 522:	b9 f7       	brne	.-18     	; 0x512 <__utoa_common+0x6>
 524:	a0 5d       	subi	r26, 0xD0	; 208
 526:	aa 33       	cpi	r26, 0x3A	; 58
 528:	08 f0       	brcs	.+2      	; 0x52c <__utoa_common+0x20>
 52a:	a9 5d       	subi	r26, 0xD9	; 217
 52c:	a1 93       	st	Z+, r26
 52e:	00 97       	sbiw	r24, 0x00	; 0
 530:	79 f7       	brne	.-34     	; 0x510 <__utoa_common+0x4>
 532:	b1 11       	cpse	r27, r1
 534:	b1 93       	st	Z+, r27
 536:	11 92       	st	Z+, r1
 538:	cb 01       	movw	r24, r22
 53a:	41 c2       	rjmp	.+1154   	; 0x9be <strrev>

0000053c <sprintf>:
 53c:	0f 93       	push	r16
 53e:	1f 93       	push	r17
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
 544:	cd b7       	in	r28, 0x3d	; 61
 546:	de b7       	in	r29, 0x3e	; 62
 548:	2e 97       	sbiw	r28, 0x0e	; 14
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	f8 94       	cli
 54e:	de bf       	out	0x3e, r29	; 62
 550:	0f be       	out	0x3f, r0	; 63
 552:	cd bf       	out	0x3d, r28	; 61
 554:	0d 89       	ldd	r16, Y+21	; 0x15
 556:	1e 89       	ldd	r17, Y+22	; 0x16
 558:	86 e0       	ldi	r24, 0x06	; 6
 55a:	8c 83       	std	Y+4, r24	; 0x04
 55c:	1a 83       	std	Y+2, r17	; 0x02
 55e:	09 83       	std	Y+1, r16	; 0x01
 560:	8f ef       	ldi	r24, 0xFF	; 255
 562:	9f e7       	ldi	r25, 0x7F	; 127
 564:	9e 83       	std	Y+6, r25	; 0x06
 566:	8d 83       	std	Y+5, r24	; 0x05
 568:	ae 01       	movw	r20, r28
 56a:	47 5e       	subi	r20, 0xE7	; 231
 56c:	5f 4f       	sbci	r21, 0xFF	; 255
 56e:	6f 89       	ldd	r22, Y+23	; 0x17
 570:	78 8d       	ldd	r23, Y+24	; 0x18
 572:	ce 01       	movw	r24, r28
 574:	01 96       	adiw	r24, 0x01	; 1
 576:	10 d0       	rcall	.+32     	; 0x598 <vfprintf>
 578:	ef 81       	ldd	r30, Y+7	; 0x07
 57a:	f8 85       	ldd	r31, Y+8	; 0x08
 57c:	e0 0f       	add	r30, r16
 57e:	f1 1f       	adc	r31, r17
 580:	10 82       	st	Z, r1
 582:	2e 96       	adiw	r28, 0x0e	; 14
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	f8 94       	cli
 588:	de bf       	out	0x3e, r29	; 62
 58a:	0f be       	out	0x3f, r0	; 63
 58c:	cd bf       	out	0x3d, r28	; 61
 58e:	df 91       	pop	r29
 590:	cf 91       	pop	r28
 592:	1f 91       	pop	r17
 594:	0f 91       	pop	r16
 596:	08 95       	ret

00000598 <vfprintf>:
 598:	2f 92       	push	r2
 59a:	3f 92       	push	r3
 59c:	4f 92       	push	r4
 59e:	5f 92       	push	r5
 5a0:	6f 92       	push	r6
 5a2:	7f 92       	push	r7
 5a4:	8f 92       	push	r8
 5a6:	9f 92       	push	r9
 5a8:	af 92       	push	r10
 5aa:	bf 92       	push	r11
 5ac:	cf 92       	push	r12
 5ae:	df 92       	push	r13
 5b0:	ef 92       	push	r14
 5b2:	ff 92       	push	r15
 5b4:	0f 93       	push	r16
 5b6:	1f 93       	push	r17
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	cd b7       	in	r28, 0x3d	; 61
 5be:	de b7       	in	r29, 0x3e	; 62
 5c0:	2b 97       	sbiw	r28, 0x0b	; 11
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	f8 94       	cli
 5c6:	de bf       	out	0x3e, r29	; 62
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	cd bf       	out	0x3d, r28	; 61
 5cc:	6c 01       	movw	r12, r24
 5ce:	7b 01       	movw	r14, r22
 5d0:	8a 01       	movw	r16, r20
 5d2:	fc 01       	movw	r30, r24
 5d4:	17 82       	std	Z+7, r1	; 0x07
 5d6:	16 82       	std	Z+6, r1	; 0x06
 5d8:	83 81       	ldd	r24, Z+3	; 0x03
 5da:	81 ff       	sbrs	r24, 1
 5dc:	bf c1       	rjmp	.+894    	; 0x95c <vfprintf+0x3c4>
 5de:	ce 01       	movw	r24, r28
 5e0:	01 96       	adiw	r24, 0x01	; 1
 5e2:	3c 01       	movw	r6, r24
 5e4:	f6 01       	movw	r30, r12
 5e6:	93 81       	ldd	r25, Z+3	; 0x03
 5e8:	f7 01       	movw	r30, r14
 5ea:	93 fd       	sbrc	r25, 3
 5ec:	85 91       	lpm	r24, Z+
 5ee:	93 ff       	sbrs	r25, 3
 5f0:	81 91       	ld	r24, Z+
 5f2:	7f 01       	movw	r14, r30
 5f4:	88 23       	and	r24, r24
 5f6:	09 f4       	brne	.+2      	; 0x5fa <vfprintf+0x62>
 5f8:	ad c1       	rjmp	.+858    	; 0x954 <vfprintf+0x3bc>
 5fa:	85 32       	cpi	r24, 0x25	; 37
 5fc:	39 f4       	brne	.+14     	; 0x60c <vfprintf+0x74>
 5fe:	93 fd       	sbrc	r25, 3
 600:	85 91       	lpm	r24, Z+
 602:	93 ff       	sbrs	r25, 3
 604:	81 91       	ld	r24, Z+
 606:	7f 01       	movw	r14, r30
 608:	85 32       	cpi	r24, 0x25	; 37
 60a:	21 f4       	brne	.+8      	; 0x614 <vfprintf+0x7c>
 60c:	b6 01       	movw	r22, r12
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	e6 d1       	rcall	.+972    	; 0x9de <fputc>
 612:	e8 cf       	rjmp	.-48     	; 0x5e4 <vfprintf+0x4c>
 614:	91 2c       	mov	r9, r1
 616:	21 2c       	mov	r2, r1
 618:	31 2c       	mov	r3, r1
 61a:	ff e1       	ldi	r31, 0x1F	; 31
 61c:	f3 15       	cp	r31, r3
 61e:	d8 f0       	brcs	.+54     	; 0x656 <vfprintf+0xbe>
 620:	8b 32       	cpi	r24, 0x2B	; 43
 622:	79 f0       	breq	.+30     	; 0x642 <vfprintf+0xaa>
 624:	38 f4       	brcc	.+14     	; 0x634 <vfprintf+0x9c>
 626:	80 32       	cpi	r24, 0x20	; 32
 628:	79 f0       	breq	.+30     	; 0x648 <vfprintf+0xb0>
 62a:	83 32       	cpi	r24, 0x23	; 35
 62c:	a1 f4       	brne	.+40     	; 0x656 <vfprintf+0xbe>
 62e:	23 2d       	mov	r18, r3
 630:	20 61       	ori	r18, 0x10	; 16
 632:	1d c0       	rjmp	.+58     	; 0x66e <vfprintf+0xd6>
 634:	8d 32       	cpi	r24, 0x2D	; 45
 636:	61 f0       	breq	.+24     	; 0x650 <vfprintf+0xb8>
 638:	80 33       	cpi	r24, 0x30	; 48
 63a:	69 f4       	brne	.+26     	; 0x656 <vfprintf+0xbe>
 63c:	23 2d       	mov	r18, r3
 63e:	21 60       	ori	r18, 0x01	; 1
 640:	16 c0       	rjmp	.+44     	; 0x66e <vfprintf+0xd6>
 642:	83 2d       	mov	r24, r3
 644:	82 60       	ori	r24, 0x02	; 2
 646:	38 2e       	mov	r3, r24
 648:	e3 2d       	mov	r30, r3
 64a:	e4 60       	ori	r30, 0x04	; 4
 64c:	3e 2e       	mov	r3, r30
 64e:	2a c0       	rjmp	.+84     	; 0x6a4 <vfprintf+0x10c>
 650:	f3 2d       	mov	r31, r3
 652:	f8 60       	ori	r31, 0x08	; 8
 654:	1d c0       	rjmp	.+58     	; 0x690 <vfprintf+0xf8>
 656:	37 fc       	sbrc	r3, 7
 658:	2d c0       	rjmp	.+90     	; 0x6b4 <vfprintf+0x11c>
 65a:	20 ed       	ldi	r18, 0xD0	; 208
 65c:	28 0f       	add	r18, r24
 65e:	2a 30       	cpi	r18, 0x0A	; 10
 660:	40 f0       	brcs	.+16     	; 0x672 <vfprintf+0xda>
 662:	8e 32       	cpi	r24, 0x2E	; 46
 664:	b9 f4       	brne	.+46     	; 0x694 <vfprintf+0xfc>
 666:	36 fc       	sbrc	r3, 6
 668:	75 c1       	rjmp	.+746    	; 0x954 <vfprintf+0x3bc>
 66a:	23 2d       	mov	r18, r3
 66c:	20 64       	ori	r18, 0x40	; 64
 66e:	32 2e       	mov	r3, r18
 670:	19 c0       	rjmp	.+50     	; 0x6a4 <vfprintf+0x10c>
 672:	36 fe       	sbrs	r3, 6
 674:	06 c0       	rjmp	.+12     	; 0x682 <vfprintf+0xea>
 676:	8a e0       	ldi	r24, 0x0A	; 10
 678:	98 9e       	mul	r9, r24
 67a:	20 0d       	add	r18, r0
 67c:	11 24       	eor	r1, r1
 67e:	92 2e       	mov	r9, r18
 680:	11 c0       	rjmp	.+34     	; 0x6a4 <vfprintf+0x10c>
 682:	ea e0       	ldi	r30, 0x0A	; 10
 684:	2e 9e       	mul	r2, r30
 686:	20 0d       	add	r18, r0
 688:	11 24       	eor	r1, r1
 68a:	22 2e       	mov	r2, r18
 68c:	f3 2d       	mov	r31, r3
 68e:	f0 62       	ori	r31, 0x20	; 32
 690:	3f 2e       	mov	r3, r31
 692:	08 c0       	rjmp	.+16     	; 0x6a4 <vfprintf+0x10c>
 694:	8c 36       	cpi	r24, 0x6C	; 108
 696:	21 f4       	brne	.+8      	; 0x6a0 <vfprintf+0x108>
 698:	83 2d       	mov	r24, r3
 69a:	80 68       	ori	r24, 0x80	; 128
 69c:	38 2e       	mov	r3, r24
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <vfprintf+0x10c>
 6a0:	88 36       	cpi	r24, 0x68	; 104
 6a2:	41 f4       	brne	.+16     	; 0x6b4 <vfprintf+0x11c>
 6a4:	f7 01       	movw	r30, r14
 6a6:	93 fd       	sbrc	r25, 3
 6a8:	85 91       	lpm	r24, Z+
 6aa:	93 ff       	sbrs	r25, 3
 6ac:	81 91       	ld	r24, Z+
 6ae:	7f 01       	movw	r14, r30
 6b0:	81 11       	cpse	r24, r1
 6b2:	b3 cf       	rjmp	.-154    	; 0x61a <vfprintf+0x82>
 6b4:	98 2f       	mov	r25, r24
 6b6:	9f 7d       	andi	r25, 0xDF	; 223
 6b8:	95 54       	subi	r25, 0x45	; 69
 6ba:	93 30       	cpi	r25, 0x03	; 3
 6bc:	28 f4       	brcc	.+10     	; 0x6c8 <vfprintf+0x130>
 6be:	0c 5f       	subi	r16, 0xFC	; 252
 6c0:	1f 4f       	sbci	r17, 0xFF	; 255
 6c2:	9f e3       	ldi	r25, 0x3F	; 63
 6c4:	99 83       	std	Y+1, r25	; 0x01
 6c6:	0d c0       	rjmp	.+26     	; 0x6e2 <vfprintf+0x14a>
 6c8:	83 36       	cpi	r24, 0x63	; 99
 6ca:	31 f0       	breq	.+12     	; 0x6d8 <vfprintf+0x140>
 6cc:	83 37       	cpi	r24, 0x73	; 115
 6ce:	71 f0       	breq	.+28     	; 0x6ec <vfprintf+0x154>
 6d0:	83 35       	cpi	r24, 0x53	; 83
 6d2:	09 f0       	breq	.+2      	; 0x6d6 <vfprintf+0x13e>
 6d4:	55 c0       	rjmp	.+170    	; 0x780 <vfprintf+0x1e8>
 6d6:	20 c0       	rjmp	.+64     	; 0x718 <vfprintf+0x180>
 6d8:	f8 01       	movw	r30, r16
 6da:	80 81       	ld	r24, Z
 6dc:	89 83       	std	Y+1, r24	; 0x01
 6de:	0e 5f       	subi	r16, 0xFE	; 254
 6e0:	1f 4f       	sbci	r17, 0xFF	; 255
 6e2:	88 24       	eor	r8, r8
 6e4:	83 94       	inc	r8
 6e6:	91 2c       	mov	r9, r1
 6e8:	53 01       	movw	r10, r6
 6ea:	12 c0       	rjmp	.+36     	; 0x710 <vfprintf+0x178>
 6ec:	28 01       	movw	r4, r16
 6ee:	f2 e0       	ldi	r31, 0x02	; 2
 6f0:	4f 0e       	add	r4, r31
 6f2:	51 1c       	adc	r5, r1
 6f4:	f8 01       	movw	r30, r16
 6f6:	a0 80       	ld	r10, Z
 6f8:	b1 80       	ldd	r11, Z+1	; 0x01
 6fa:	36 fe       	sbrs	r3, 6
 6fc:	03 c0       	rjmp	.+6      	; 0x704 <vfprintf+0x16c>
 6fe:	69 2d       	mov	r22, r9
 700:	70 e0       	ldi	r23, 0x00	; 0
 702:	02 c0       	rjmp	.+4      	; 0x708 <vfprintf+0x170>
 704:	6f ef       	ldi	r22, 0xFF	; 255
 706:	7f ef       	ldi	r23, 0xFF	; 255
 708:	c5 01       	movw	r24, r10
 70a:	4e d1       	rcall	.+668    	; 0x9a8 <strnlen>
 70c:	4c 01       	movw	r8, r24
 70e:	82 01       	movw	r16, r4
 710:	f3 2d       	mov	r31, r3
 712:	ff 77       	andi	r31, 0x7F	; 127
 714:	3f 2e       	mov	r3, r31
 716:	15 c0       	rjmp	.+42     	; 0x742 <vfprintf+0x1aa>
 718:	28 01       	movw	r4, r16
 71a:	22 e0       	ldi	r18, 0x02	; 2
 71c:	42 0e       	add	r4, r18
 71e:	51 1c       	adc	r5, r1
 720:	f8 01       	movw	r30, r16
 722:	a0 80       	ld	r10, Z
 724:	b1 80       	ldd	r11, Z+1	; 0x01
 726:	36 fe       	sbrs	r3, 6
 728:	03 c0       	rjmp	.+6      	; 0x730 <vfprintf+0x198>
 72a:	69 2d       	mov	r22, r9
 72c:	70 e0       	ldi	r23, 0x00	; 0
 72e:	02 c0       	rjmp	.+4      	; 0x734 <vfprintf+0x19c>
 730:	6f ef       	ldi	r22, 0xFF	; 255
 732:	7f ef       	ldi	r23, 0xFF	; 255
 734:	c5 01       	movw	r24, r10
 736:	2d d1       	rcall	.+602    	; 0x992 <strnlen_P>
 738:	4c 01       	movw	r8, r24
 73a:	f3 2d       	mov	r31, r3
 73c:	f0 68       	ori	r31, 0x80	; 128
 73e:	3f 2e       	mov	r3, r31
 740:	82 01       	movw	r16, r4
 742:	33 fc       	sbrc	r3, 3
 744:	19 c0       	rjmp	.+50     	; 0x778 <vfprintf+0x1e0>
 746:	82 2d       	mov	r24, r2
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	88 16       	cp	r8, r24
 74c:	99 06       	cpc	r9, r25
 74e:	a0 f4       	brcc	.+40     	; 0x778 <vfprintf+0x1e0>
 750:	b6 01       	movw	r22, r12
 752:	80 e2       	ldi	r24, 0x20	; 32
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	43 d1       	rcall	.+646    	; 0x9de <fputc>
 758:	2a 94       	dec	r2
 75a:	f5 cf       	rjmp	.-22     	; 0x746 <vfprintf+0x1ae>
 75c:	f5 01       	movw	r30, r10
 75e:	37 fc       	sbrc	r3, 7
 760:	85 91       	lpm	r24, Z+
 762:	37 fe       	sbrs	r3, 7
 764:	81 91       	ld	r24, Z+
 766:	5f 01       	movw	r10, r30
 768:	b6 01       	movw	r22, r12
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	38 d1       	rcall	.+624    	; 0x9de <fputc>
 76e:	21 10       	cpse	r2, r1
 770:	2a 94       	dec	r2
 772:	21 e0       	ldi	r18, 0x01	; 1
 774:	82 1a       	sub	r8, r18
 776:	91 08       	sbc	r9, r1
 778:	81 14       	cp	r8, r1
 77a:	91 04       	cpc	r9, r1
 77c:	79 f7       	brne	.-34     	; 0x75c <vfprintf+0x1c4>
 77e:	e1 c0       	rjmp	.+450    	; 0x942 <vfprintf+0x3aa>
 780:	84 36       	cpi	r24, 0x64	; 100
 782:	11 f0       	breq	.+4      	; 0x788 <vfprintf+0x1f0>
 784:	89 36       	cpi	r24, 0x69	; 105
 786:	39 f5       	brne	.+78     	; 0x7d6 <vfprintf+0x23e>
 788:	f8 01       	movw	r30, r16
 78a:	37 fe       	sbrs	r3, 7
 78c:	07 c0       	rjmp	.+14     	; 0x79c <vfprintf+0x204>
 78e:	60 81       	ld	r22, Z
 790:	71 81       	ldd	r23, Z+1	; 0x01
 792:	82 81       	ldd	r24, Z+2	; 0x02
 794:	93 81       	ldd	r25, Z+3	; 0x03
 796:	0c 5f       	subi	r16, 0xFC	; 252
 798:	1f 4f       	sbci	r17, 0xFF	; 255
 79a:	08 c0       	rjmp	.+16     	; 0x7ac <vfprintf+0x214>
 79c:	60 81       	ld	r22, Z
 79e:	71 81       	ldd	r23, Z+1	; 0x01
 7a0:	07 2e       	mov	r0, r23
 7a2:	00 0c       	add	r0, r0
 7a4:	88 0b       	sbc	r24, r24
 7a6:	99 0b       	sbc	r25, r25
 7a8:	0e 5f       	subi	r16, 0xFE	; 254
 7aa:	1f 4f       	sbci	r17, 0xFF	; 255
 7ac:	f3 2d       	mov	r31, r3
 7ae:	ff 76       	andi	r31, 0x6F	; 111
 7b0:	3f 2e       	mov	r3, r31
 7b2:	97 ff       	sbrs	r25, 7
 7b4:	09 c0       	rjmp	.+18     	; 0x7c8 <vfprintf+0x230>
 7b6:	90 95       	com	r25
 7b8:	80 95       	com	r24
 7ba:	70 95       	com	r23
 7bc:	61 95       	neg	r22
 7be:	7f 4f       	sbci	r23, 0xFF	; 255
 7c0:	8f 4f       	sbci	r24, 0xFF	; 255
 7c2:	9f 4f       	sbci	r25, 0xFF	; 255
 7c4:	f0 68       	ori	r31, 0x80	; 128
 7c6:	3f 2e       	mov	r3, r31
 7c8:	2a e0       	ldi	r18, 0x0A	; 10
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	a3 01       	movw	r20, r6
 7ce:	43 d1       	rcall	.+646    	; 0xa56 <__ultoa_invert>
 7d0:	88 2e       	mov	r8, r24
 7d2:	86 18       	sub	r8, r6
 7d4:	44 c0       	rjmp	.+136    	; 0x85e <vfprintf+0x2c6>
 7d6:	85 37       	cpi	r24, 0x75	; 117
 7d8:	31 f4       	brne	.+12     	; 0x7e6 <vfprintf+0x24e>
 7da:	23 2d       	mov	r18, r3
 7dc:	2f 7e       	andi	r18, 0xEF	; 239
 7de:	b2 2e       	mov	r11, r18
 7e0:	2a e0       	ldi	r18, 0x0A	; 10
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	25 c0       	rjmp	.+74     	; 0x830 <vfprintf+0x298>
 7e6:	93 2d       	mov	r25, r3
 7e8:	99 7f       	andi	r25, 0xF9	; 249
 7ea:	b9 2e       	mov	r11, r25
 7ec:	8f 36       	cpi	r24, 0x6F	; 111
 7ee:	c1 f0       	breq	.+48     	; 0x820 <vfprintf+0x288>
 7f0:	18 f4       	brcc	.+6      	; 0x7f8 <vfprintf+0x260>
 7f2:	88 35       	cpi	r24, 0x58	; 88
 7f4:	79 f0       	breq	.+30     	; 0x814 <vfprintf+0x27c>
 7f6:	ae c0       	rjmp	.+348    	; 0x954 <vfprintf+0x3bc>
 7f8:	80 37       	cpi	r24, 0x70	; 112
 7fa:	19 f0       	breq	.+6      	; 0x802 <vfprintf+0x26a>
 7fc:	88 37       	cpi	r24, 0x78	; 120
 7fe:	21 f0       	breq	.+8      	; 0x808 <vfprintf+0x270>
 800:	a9 c0       	rjmp	.+338    	; 0x954 <vfprintf+0x3bc>
 802:	e9 2f       	mov	r30, r25
 804:	e0 61       	ori	r30, 0x10	; 16
 806:	be 2e       	mov	r11, r30
 808:	b4 fe       	sbrs	r11, 4
 80a:	0d c0       	rjmp	.+26     	; 0x826 <vfprintf+0x28e>
 80c:	fb 2d       	mov	r31, r11
 80e:	f4 60       	ori	r31, 0x04	; 4
 810:	bf 2e       	mov	r11, r31
 812:	09 c0       	rjmp	.+18     	; 0x826 <vfprintf+0x28e>
 814:	34 fe       	sbrs	r3, 4
 816:	0a c0       	rjmp	.+20     	; 0x82c <vfprintf+0x294>
 818:	29 2f       	mov	r18, r25
 81a:	26 60       	ori	r18, 0x06	; 6
 81c:	b2 2e       	mov	r11, r18
 81e:	06 c0       	rjmp	.+12     	; 0x82c <vfprintf+0x294>
 820:	28 e0       	ldi	r18, 0x08	; 8
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	05 c0       	rjmp	.+10     	; 0x830 <vfprintf+0x298>
 826:	20 e1       	ldi	r18, 0x10	; 16
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	02 c0       	rjmp	.+4      	; 0x830 <vfprintf+0x298>
 82c:	20 e1       	ldi	r18, 0x10	; 16
 82e:	32 e0       	ldi	r19, 0x02	; 2
 830:	f8 01       	movw	r30, r16
 832:	b7 fe       	sbrs	r11, 7
 834:	07 c0       	rjmp	.+14     	; 0x844 <vfprintf+0x2ac>
 836:	60 81       	ld	r22, Z
 838:	71 81       	ldd	r23, Z+1	; 0x01
 83a:	82 81       	ldd	r24, Z+2	; 0x02
 83c:	93 81       	ldd	r25, Z+3	; 0x03
 83e:	0c 5f       	subi	r16, 0xFC	; 252
 840:	1f 4f       	sbci	r17, 0xFF	; 255
 842:	06 c0       	rjmp	.+12     	; 0x850 <vfprintf+0x2b8>
 844:	60 81       	ld	r22, Z
 846:	71 81       	ldd	r23, Z+1	; 0x01
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	0e 5f       	subi	r16, 0xFE	; 254
 84e:	1f 4f       	sbci	r17, 0xFF	; 255
 850:	a3 01       	movw	r20, r6
 852:	01 d1       	rcall	.+514    	; 0xa56 <__ultoa_invert>
 854:	88 2e       	mov	r8, r24
 856:	86 18       	sub	r8, r6
 858:	fb 2d       	mov	r31, r11
 85a:	ff 77       	andi	r31, 0x7F	; 127
 85c:	3f 2e       	mov	r3, r31
 85e:	36 fe       	sbrs	r3, 6
 860:	0d c0       	rjmp	.+26     	; 0x87c <vfprintf+0x2e4>
 862:	23 2d       	mov	r18, r3
 864:	2e 7f       	andi	r18, 0xFE	; 254
 866:	a2 2e       	mov	r10, r18
 868:	89 14       	cp	r8, r9
 86a:	58 f4       	brcc	.+22     	; 0x882 <vfprintf+0x2ea>
 86c:	34 fe       	sbrs	r3, 4
 86e:	0b c0       	rjmp	.+22     	; 0x886 <vfprintf+0x2ee>
 870:	32 fc       	sbrc	r3, 2
 872:	09 c0       	rjmp	.+18     	; 0x886 <vfprintf+0x2ee>
 874:	83 2d       	mov	r24, r3
 876:	8e 7e       	andi	r24, 0xEE	; 238
 878:	a8 2e       	mov	r10, r24
 87a:	05 c0       	rjmp	.+10     	; 0x886 <vfprintf+0x2ee>
 87c:	b8 2c       	mov	r11, r8
 87e:	a3 2c       	mov	r10, r3
 880:	03 c0       	rjmp	.+6      	; 0x888 <vfprintf+0x2f0>
 882:	b8 2c       	mov	r11, r8
 884:	01 c0       	rjmp	.+2      	; 0x888 <vfprintf+0x2f0>
 886:	b9 2c       	mov	r11, r9
 888:	a4 fe       	sbrs	r10, 4
 88a:	0f c0       	rjmp	.+30     	; 0x8aa <vfprintf+0x312>
 88c:	fe 01       	movw	r30, r28
 88e:	e8 0d       	add	r30, r8
 890:	f1 1d       	adc	r31, r1
 892:	80 81       	ld	r24, Z
 894:	80 33       	cpi	r24, 0x30	; 48
 896:	21 f4       	brne	.+8      	; 0x8a0 <vfprintf+0x308>
 898:	9a 2d       	mov	r25, r10
 89a:	99 7e       	andi	r25, 0xE9	; 233
 89c:	a9 2e       	mov	r10, r25
 89e:	09 c0       	rjmp	.+18     	; 0x8b2 <vfprintf+0x31a>
 8a0:	a2 fe       	sbrs	r10, 2
 8a2:	06 c0       	rjmp	.+12     	; 0x8b0 <vfprintf+0x318>
 8a4:	b3 94       	inc	r11
 8a6:	b3 94       	inc	r11
 8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <vfprintf+0x31a>
 8aa:	8a 2d       	mov	r24, r10
 8ac:	86 78       	andi	r24, 0x86	; 134
 8ae:	09 f0       	breq	.+2      	; 0x8b2 <vfprintf+0x31a>
 8b0:	b3 94       	inc	r11
 8b2:	a3 fc       	sbrc	r10, 3
 8b4:	10 c0       	rjmp	.+32     	; 0x8d6 <vfprintf+0x33e>
 8b6:	a0 fe       	sbrs	r10, 0
 8b8:	06 c0       	rjmp	.+12     	; 0x8c6 <vfprintf+0x32e>
 8ba:	b2 14       	cp	r11, r2
 8bc:	80 f4       	brcc	.+32     	; 0x8de <vfprintf+0x346>
 8be:	28 0c       	add	r2, r8
 8c0:	92 2c       	mov	r9, r2
 8c2:	9b 18       	sub	r9, r11
 8c4:	0d c0       	rjmp	.+26     	; 0x8e0 <vfprintf+0x348>
 8c6:	b2 14       	cp	r11, r2
 8c8:	58 f4       	brcc	.+22     	; 0x8e0 <vfprintf+0x348>
 8ca:	b6 01       	movw	r22, r12
 8cc:	80 e2       	ldi	r24, 0x20	; 32
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	86 d0       	rcall	.+268    	; 0x9de <fputc>
 8d2:	b3 94       	inc	r11
 8d4:	f8 cf       	rjmp	.-16     	; 0x8c6 <vfprintf+0x32e>
 8d6:	b2 14       	cp	r11, r2
 8d8:	18 f4       	brcc	.+6      	; 0x8e0 <vfprintf+0x348>
 8da:	2b 18       	sub	r2, r11
 8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <vfprintf+0x34a>
 8de:	98 2c       	mov	r9, r8
 8e0:	21 2c       	mov	r2, r1
 8e2:	a4 fe       	sbrs	r10, 4
 8e4:	0f c0       	rjmp	.+30     	; 0x904 <vfprintf+0x36c>
 8e6:	b6 01       	movw	r22, r12
 8e8:	80 e3       	ldi	r24, 0x30	; 48
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	78 d0       	rcall	.+240    	; 0x9de <fputc>
 8ee:	a2 fe       	sbrs	r10, 2
 8f0:	16 c0       	rjmp	.+44     	; 0x91e <vfprintf+0x386>
 8f2:	a1 fc       	sbrc	r10, 1
 8f4:	03 c0       	rjmp	.+6      	; 0x8fc <vfprintf+0x364>
 8f6:	88 e7       	ldi	r24, 0x78	; 120
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <vfprintf+0x368>
 8fc:	88 e5       	ldi	r24, 0x58	; 88
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	b6 01       	movw	r22, r12
 902:	0c c0       	rjmp	.+24     	; 0x91c <vfprintf+0x384>
 904:	8a 2d       	mov	r24, r10
 906:	86 78       	andi	r24, 0x86	; 134
 908:	51 f0       	breq	.+20     	; 0x91e <vfprintf+0x386>
 90a:	a1 fe       	sbrs	r10, 1
 90c:	02 c0       	rjmp	.+4      	; 0x912 <vfprintf+0x37a>
 90e:	8b e2       	ldi	r24, 0x2B	; 43
 910:	01 c0       	rjmp	.+2      	; 0x914 <vfprintf+0x37c>
 912:	80 e2       	ldi	r24, 0x20	; 32
 914:	a7 fc       	sbrc	r10, 7
 916:	8d e2       	ldi	r24, 0x2D	; 45
 918:	b6 01       	movw	r22, r12
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	60 d0       	rcall	.+192    	; 0x9de <fputc>
 91e:	89 14       	cp	r8, r9
 920:	30 f4       	brcc	.+12     	; 0x92e <vfprintf+0x396>
 922:	b6 01       	movw	r22, r12
 924:	80 e3       	ldi	r24, 0x30	; 48
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	5a d0       	rcall	.+180    	; 0x9de <fputc>
 92a:	9a 94       	dec	r9
 92c:	f8 cf       	rjmp	.-16     	; 0x91e <vfprintf+0x386>
 92e:	8a 94       	dec	r8
 930:	f3 01       	movw	r30, r6
 932:	e8 0d       	add	r30, r8
 934:	f1 1d       	adc	r31, r1
 936:	80 81       	ld	r24, Z
 938:	b6 01       	movw	r22, r12
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	50 d0       	rcall	.+160    	; 0x9de <fputc>
 93e:	81 10       	cpse	r8, r1
 940:	f6 cf       	rjmp	.-20     	; 0x92e <vfprintf+0x396>
 942:	22 20       	and	r2, r2
 944:	09 f4       	brne	.+2      	; 0x948 <vfprintf+0x3b0>
 946:	4e ce       	rjmp	.-868    	; 0x5e4 <vfprintf+0x4c>
 948:	b6 01       	movw	r22, r12
 94a:	80 e2       	ldi	r24, 0x20	; 32
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	47 d0       	rcall	.+142    	; 0x9de <fputc>
 950:	2a 94       	dec	r2
 952:	f7 cf       	rjmp	.-18     	; 0x942 <vfprintf+0x3aa>
 954:	f6 01       	movw	r30, r12
 956:	86 81       	ldd	r24, Z+6	; 0x06
 958:	97 81       	ldd	r25, Z+7	; 0x07
 95a:	02 c0       	rjmp	.+4      	; 0x960 <vfprintf+0x3c8>
 95c:	8f ef       	ldi	r24, 0xFF	; 255
 95e:	9f ef       	ldi	r25, 0xFF	; 255
 960:	2b 96       	adiw	r28, 0x0b	; 11
 962:	0f b6       	in	r0, 0x3f	; 63
 964:	f8 94       	cli
 966:	de bf       	out	0x3e, r29	; 62
 968:	0f be       	out	0x3f, r0	; 63
 96a:	cd bf       	out	0x3d, r28	; 61
 96c:	df 91       	pop	r29
 96e:	cf 91       	pop	r28
 970:	1f 91       	pop	r17
 972:	0f 91       	pop	r16
 974:	ff 90       	pop	r15
 976:	ef 90       	pop	r14
 978:	df 90       	pop	r13
 97a:	cf 90       	pop	r12
 97c:	bf 90       	pop	r11
 97e:	af 90       	pop	r10
 980:	9f 90       	pop	r9
 982:	8f 90       	pop	r8
 984:	7f 90       	pop	r7
 986:	6f 90       	pop	r6
 988:	5f 90       	pop	r5
 98a:	4f 90       	pop	r4
 98c:	3f 90       	pop	r3
 98e:	2f 90       	pop	r2
 990:	08 95       	ret

00000992 <strnlen_P>:
 992:	fc 01       	movw	r30, r24
 994:	05 90       	lpm	r0, Z+
 996:	61 50       	subi	r22, 0x01	; 1
 998:	70 40       	sbci	r23, 0x00	; 0
 99a:	01 10       	cpse	r0, r1
 99c:	d8 f7       	brcc	.-10     	; 0x994 <strnlen_P+0x2>
 99e:	80 95       	com	r24
 9a0:	90 95       	com	r25
 9a2:	8e 0f       	add	r24, r30
 9a4:	9f 1f       	adc	r25, r31
 9a6:	08 95       	ret

000009a8 <strnlen>:
 9a8:	fc 01       	movw	r30, r24
 9aa:	61 50       	subi	r22, 0x01	; 1
 9ac:	70 40       	sbci	r23, 0x00	; 0
 9ae:	01 90       	ld	r0, Z+
 9b0:	01 10       	cpse	r0, r1
 9b2:	d8 f7       	brcc	.-10     	; 0x9aa <strnlen+0x2>
 9b4:	80 95       	com	r24
 9b6:	90 95       	com	r25
 9b8:	8e 0f       	add	r24, r30
 9ba:	9f 1f       	adc	r25, r31
 9bc:	08 95       	ret

000009be <strrev>:
 9be:	dc 01       	movw	r26, r24
 9c0:	fc 01       	movw	r30, r24
 9c2:	67 2f       	mov	r22, r23
 9c4:	71 91       	ld	r23, Z+
 9c6:	77 23       	and	r23, r23
 9c8:	e1 f7       	brne	.-8      	; 0x9c2 <strrev+0x4>
 9ca:	32 97       	sbiw	r30, 0x02	; 2
 9cc:	04 c0       	rjmp	.+8      	; 0x9d6 <strrev+0x18>
 9ce:	7c 91       	ld	r23, X
 9d0:	6d 93       	st	X+, r22
 9d2:	70 83       	st	Z, r23
 9d4:	62 91       	ld	r22, -Z
 9d6:	ae 17       	cp	r26, r30
 9d8:	bf 07       	cpc	r27, r31
 9da:	c8 f3       	brcs	.-14     	; 0x9ce <strrev+0x10>
 9dc:	08 95       	ret

000009de <fputc>:
 9de:	0f 93       	push	r16
 9e0:	1f 93       	push	r17
 9e2:	cf 93       	push	r28
 9e4:	df 93       	push	r29
 9e6:	fb 01       	movw	r30, r22
 9e8:	23 81       	ldd	r18, Z+3	; 0x03
 9ea:	21 fd       	sbrc	r18, 1
 9ec:	03 c0       	rjmp	.+6      	; 0x9f4 <fputc+0x16>
 9ee:	8f ef       	ldi	r24, 0xFF	; 255
 9f0:	9f ef       	ldi	r25, 0xFF	; 255
 9f2:	2c c0       	rjmp	.+88     	; 0xa4c <fputc+0x6e>
 9f4:	22 ff       	sbrs	r18, 2
 9f6:	16 c0       	rjmp	.+44     	; 0xa24 <fputc+0x46>
 9f8:	46 81       	ldd	r20, Z+6	; 0x06
 9fa:	57 81       	ldd	r21, Z+7	; 0x07
 9fc:	24 81       	ldd	r18, Z+4	; 0x04
 9fe:	35 81       	ldd	r19, Z+5	; 0x05
 a00:	42 17       	cp	r20, r18
 a02:	53 07       	cpc	r21, r19
 a04:	44 f4       	brge	.+16     	; 0xa16 <fputc+0x38>
 a06:	a0 81       	ld	r26, Z
 a08:	b1 81       	ldd	r27, Z+1	; 0x01
 a0a:	9d 01       	movw	r18, r26
 a0c:	2f 5f       	subi	r18, 0xFF	; 255
 a0e:	3f 4f       	sbci	r19, 0xFF	; 255
 a10:	31 83       	std	Z+1, r19	; 0x01
 a12:	20 83       	st	Z, r18
 a14:	8c 93       	st	X, r24
 a16:	26 81       	ldd	r18, Z+6	; 0x06
 a18:	37 81       	ldd	r19, Z+7	; 0x07
 a1a:	2f 5f       	subi	r18, 0xFF	; 255
 a1c:	3f 4f       	sbci	r19, 0xFF	; 255
 a1e:	37 83       	std	Z+7, r19	; 0x07
 a20:	26 83       	std	Z+6, r18	; 0x06
 a22:	14 c0       	rjmp	.+40     	; 0xa4c <fputc+0x6e>
 a24:	8b 01       	movw	r16, r22
 a26:	ec 01       	movw	r28, r24
 a28:	fb 01       	movw	r30, r22
 a2a:	00 84       	ldd	r0, Z+8	; 0x08
 a2c:	f1 85       	ldd	r31, Z+9	; 0x09
 a2e:	e0 2d       	mov	r30, r0
 a30:	09 95       	icall
 a32:	89 2b       	or	r24, r25
 a34:	e1 f6       	brne	.-72     	; 0x9ee <fputc+0x10>
 a36:	d8 01       	movw	r26, r16
 a38:	16 96       	adiw	r26, 0x06	; 6
 a3a:	8d 91       	ld	r24, X+
 a3c:	9c 91       	ld	r25, X
 a3e:	17 97       	sbiw	r26, 0x07	; 7
 a40:	01 96       	adiw	r24, 0x01	; 1
 a42:	17 96       	adiw	r26, 0x07	; 7
 a44:	9c 93       	st	X, r25
 a46:	8e 93       	st	-X, r24
 a48:	16 97       	sbiw	r26, 0x06	; 6
 a4a:	ce 01       	movw	r24, r28
 a4c:	df 91       	pop	r29
 a4e:	cf 91       	pop	r28
 a50:	1f 91       	pop	r17
 a52:	0f 91       	pop	r16
 a54:	08 95       	ret

00000a56 <__ultoa_invert>:
 a56:	fa 01       	movw	r30, r20
 a58:	aa 27       	eor	r26, r26
 a5a:	28 30       	cpi	r18, 0x08	; 8
 a5c:	51 f1       	breq	.+84     	; 0xab2 <__ultoa_invert+0x5c>
 a5e:	20 31       	cpi	r18, 0x10	; 16
 a60:	81 f1       	breq	.+96     	; 0xac2 <__ultoa_invert+0x6c>
 a62:	e8 94       	clt
 a64:	6f 93       	push	r22
 a66:	6e 7f       	andi	r22, 0xFE	; 254
 a68:	6e 5f       	subi	r22, 0xFE	; 254
 a6a:	7f 4f       	sbci	r23, 0xFF	; 255
 a6c:	8f 4f       	sbci	r24, 0xFF	; 255
 a6e:	9f 4f       	sbci	r25, 0xFF	; 255
 a70:	af 4f       	sbci	r26, 0xFF	; 255
 a72:	b1 e0       	ldi	r27, 0x01	; 1
 a74:	3e d0       	rcall	.+124    	; 0xaf2 <__ultoa_invert+0x9c>
 a76:	b4 e0       	ldi	r27, 0x04	; 4
 a78:	3c d0       	rcall	.+120    	; 0xaf2 <__ultoa_invert+0x9c>
 a7a:	67 0f       	add	r22, r23
 a7c:	78 1f       	adc	r23, r24
 a7e:	89 1f       	adc	r24, r25
 a80:	9a 1f       	adc	r25, r26
 a82:	a1 1d       	adc	r26, r1
 a84:	68 0f       	add	r22, r24
 a86:	79 1f       	adc	r23, r25
 a88:	8a 1f       	adc	r24, r26
 a8a:	91 1d       	adc	r25, r1
 a8c:	a1 1d       	adc	r26, r1
 a8e:	6a 0f       	add	r22, r26
 a90:	71 1d       	adc	r23, r1
 a92:	81 1d       	adc	r24, r1
 a94:	91 1d       	adc	r25, r1
 a96:	a1 1d       	adc	r26, r1
 a98:	20 d0       	rcall	.+64     	; 0xada <__ultoa_invert+0x84>
 a9a:	09 f4       	brne	.+2      	; 0xa9e <__ultoa_invert+0x48>
 a9c:	68 94       	set
 a9e:	3f 91       	pop	r19
 aa0:	2a e0       	ldi	r18, 0x0A	; 10
 aa2:	26 9f       	mul	r18, r22
 aa4:	11 24       	eor	r1, r1
 aa6:	30 19       	sub	r19, r0
 aa8:	30 5d       	subi	r19, 0xD0	; 208
 aaa:	31 93       	st	Z+, r19
 aac:	de f6       	brtc	.-74     	; 0xa64 <__ultoa_invert+0xe>
 aae:	cf 01       	movw	r24, r30
 ab0:	08 95       	ret
 ab2:	46 2f       	mov	r20, r22
 ab4:	47 70       	andi	r20, 0x07	; 7
 ab6:	40 5d       	subi	r20, 0xD0	; 208
 ab8:	41 93       	st	Z+, r20
 aba:	b3 e0       	ldi	r27, 0x03	; 3
 abc:	0f d0       	rcall	.+30     	; 0xadc <__ultoa_invert+0x86>
 abe:	c9 f7       	brne	.-14     	; 0xab2 <__ultoa_invert+0x5c>
 ac0:	f6 cf       	rjmp	.-20     	; 0xaae <__ultoa_invert+0x58>
 ac2:	46 2f       	mov	r20, r22
 ac4:	4f 70       	andi	r20, 0x0F	; 15
 ac6:	40 5d       	subi	r20, 0xD0	; 208
 ac8:	4a 33       	cpi	r20, 0x3A	; 58
 aca:	18 f0       	brcs	.+6      	; 0xad2 <__ultoa_invert+0x7c>
 acc:	49 5d       	subi	r20, 0xD9	; 217
 ace:	31 fd       	sbrc	r19, 1
 ad0:	40 52       	subi	r20, 0x20	; 32
 ad2:	41 93       	st	Z+, r20
 ad4:	02 d0       	rcall	.+4      	; 0xada <__ultoa_invert+0x84>
 ad6:	a9 f7       	brne	.-22     	; 0xac2 <__ultoa_invert+0x6c>
 ad8:	ea cf       	rjmp	.-44     	; 0xaae <__ultoa_invert+0x58>
 ada:	b4 e0       	ldi	r27, 0x04	; 4
 adc:	a6 95       	lsr	r26
 ade:	97 95       	ror	r25
 ae0:	87 95       	ror	r24
 ae2:	77 95       	ror	r23
 ae4:	67 95       	ror	r22
 ae6:	ba 95       	dec	r27
 ae8:	c9 f7       	brne	.-14     	; 0xadc <__ultoa_invert+0x86>
 aea:	00 97       	sbiw	r24, 0x00	; 0
 aec:	61 05       	cpc	r22, r1
 aee:	71 05       	cpc	r23, r1
 af0:	08 95       	ret
 af2:	9b 01       	movw	r18, r22
 af4:	ac 01       	movw	r20, r24
 af6:	0a 2e       	mov	r0, r26
 af8:	06 94       	lsr	r0
 afa:	57 95       	ror	r21
 afc:	47 95       	ror	r20
 afe:	37 95       	ror	r19
 b00:	27 95       	ror	r18
 b02:	ba 95       	dec	r27
 b04:	c9 f7       	brne	.-14     	; 0xaf8 <__ultoa_invert+0xa2>
 b06:	62 0f       	add	r22, r18
 b08:	73 1f       	adc	r23, r19
 b0a:	84 1f       	adc	r24, r20
 b0c:	95 1f       	adc	r25, r21
 b0e:	a0 1d       	adc	r26, r0
 b10:	08 95       	ret

00000b12 <_exit>:
 b12:	f8 94       	cli

00000b14 <__stop_program>:
 b14:	ff cf       	rjmp	.-2      	; 0xb14 <__stop_program>
